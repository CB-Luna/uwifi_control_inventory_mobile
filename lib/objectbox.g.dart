// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/entitys.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(27, 1774905738150923512),
      name: 'Bitacora',
      lastPropertyId: const IdUid(60, 7718043921058698535),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2437720472275770378),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 285794828058190926),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4185118097964001351),
            name: 'instruccionAdicional',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 9135086539016474235),
            name: 'instruccion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 245771756674032572),
            name: 'usuarioPropietario',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 6977709619624885474),
            name: 'executeSupabase',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(41, 2457664418451866272),
            name: 'idControlForm',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(42, 4800100120392120930),
            name: 'controlFormId',
            type: 11,
            flags: 520,
            indexId: const IdUid(372, 7871258116235721040),
            relationTarget: 'ControlForm'),
        ModelProperty(
            id: const IdUid(43, 1408073293692008185),
            name: 'measuresId',
            type: 11,
            flags: 520,
            indexId: const IdUid(376, 263922831672018031),
            relationTarget: 'Measures'),
        ModelProperty(
            id: const IdUid(44, 1138938114752442633),
            name: 'lightsId',
            type: 11,
            flags: 520,
            indexId: const IdUid(377, 40880772659364979),
            relationTarget: 'Lights'),
        ModelProperty(
            id: const IdUid(45, 4195233311585393226),
            name: 'carBodyworkId',
            type: 11,
            flags: 520,
            indexId: const IdUid(378, 2010376632410013126),
            relationTarget: 'CarBodywork'),
        ModelProperty(
            id: const IdUid(46, 4668631312615613734),
            name: 'fluidsCheckId',
            type: 11,
            flags: 520,
            indexId: const IdUid(379, 8501202086134165031),
            relationTarget: 'FluidsCheck'),
        ModelProperty(
            id: const IdUid(48, 1017402764522477897),
            name: 'securityId',
            type: 11,
            flags: 520,
            indexId: const IdUid(381, 105497353321209891),
            relationTarget: 'Security'),
        ModelProperty(
            id: const IdUid(49, 585266921959677158),
            name: 'extraId',
            type: 11,
            flags: 520,
            indexId: const IdUid(382, 4442815967066988465),
            relationTarget: 'Extra'),
        ModelProperty(
            id: const IdUid(50, 4460623311570316080),
            name: 'equipmentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(383, 8146326558909109447),
            relationTarget: 'Equipment'),
        ModelProperty(
            id: const IdUid(51, 6358376319212308688),
            name: 'bucketInspectionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(411, 8701175118663334704),
            relationTarget: 'BucketInspection'),
        ModelProperty(
            id: const IdUid(52, 2592111304080072713),
            name: 'statusId',
            type: 11,
            flags: 520,
            indexId: const IdUid(416, 1928035110659229249),
            relationTarget: 'Status'),
        ModelProperty(
            id: const IdUid(53, 1016443553456847887),
            name: 'companyId',
            type: 11,
            flags: 520,
            indexId: const IdUid(417, 6487682921463916362),
            relationTarget: 'Company'),
        ModelProperty(
            id: const IdUid(54, 4949095522373307717),
            name: 'vehicleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(419, 8940549541967530173),
            relationTarget: 'Vehicle'),
        ModelProperty(
            id: const IdUid(55, 2937029939842389045),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(426, 8388412147556799022),
            relationTarget: 'Users'),
        ModelProperty(
            id: const IdUid(56, 7220221899660725791),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(451, 6635979231225978650),
            relationTarget: 'Service'),
        ModelProperty(
            id: const IdUid(57, 7769754459961668524),
            name: 'vehicleServiceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(452, 2432638833963189135),
            relationTarget: 'VehicleServices'),
        ModelProperty(
            id: const IdUid(58, 6864433048827413011),
            name: 'ruleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(457, 2883972706903277445),
            relationTarget: 'Rule'),
        ModelProperty(
            id: const IdUid(60, 7718043921058698535),
            name: 'imageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(468, 1958035184437957891),
            relationTarget: 'Image')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'users', srcEntity: 'Users', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(86, 283646429578876451),
      name: 'ControlForm',
      lastPropertyId: const IdUid(38, 7955731353673957890),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7451026335197679217),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 8105920711952487409),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(373, 3190710911406193471)),
        ModelProperty(
            id: const IdUid(5, 8212325574984625020),
            name: 'employeeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(374, 2639272973053853247),
            relationTarget: 'Users'),
        ModelProperty(
            id: const IdUid(6, 4968957818395113321),
            name: 'vehicleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(375, 5109090144384492697),
            relationTarget: 'Vehicle'),
        ModelProperty(
            id: const IdUid(18, 4939078722358756667),
            name: 'dateAddedR',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 7721689959183185022),
            name: 'dateAddedD',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 5017922096706535505),
            name: 'issuesR',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 4217610095448771704),
            name: 'issuesD',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 3080798193881943248),
            name: 'measuresRId',
            type: 11,
            flags: 520,
            indexId: const IdUid(435, 122992020478916022),
            relationTarget: 'Measures'),
        ModelProperty(
            id: const IdUid(23, 7176987853653918766),
            name: 'lightsRId',
            type: 11,
            flags: 520,
            indexId: const IdUid(436, 1873973174052103437),
            relationTarget: 'Lights'),
        ModelProperty(
            id: const IdUid(24, 1383480465253217739),
            name: 'carBodyworkRId',
            type: 11,
            flags: 520,
            indexId: const IdUid(437, 8805291357515159169),
            relationTarget: 'CarBodywork'),
        ModelProperty(
            id: const IdUid(25, 8468558113948439846),
            name: 'fluidsCheckRId',
            type: 11,
            flags: 520,
            indexId: const IdUid(438, 3184683556371449944),
            relationTarget: 'FluidsCheck'),
        ModelProperty(
            id: const IdUid(26, 7816600607549354181),
            name: 'bucketInspectionRId',
            type: 11,
            flags: 520,
            indexId: const IdUid(439, 236811738838167750),
            relationTarget: 'BucketInspection'),
        ModelProperty(
            id: const IdUid(27, 4973135530074138941),
            name: 'securityRId',
            type: 11,
            flags: 520,
            indexId: const IdUid(440, 4835492171320096392),
            relationTarget: 'Security'),
        ModelProperty(
            id: const IdUid(28, 6643909120436266416),
            name: 'extraRId',
            type: 11,
            flags: 520,
            indexId: const IdUid(441, 8080326262320799826),
            relationTarget: 'Extra'),
        ModelProperty(
            id: const IdUid(29, 1245445534545642663),
            name: 'equipmentRId',
            type: 11,
            flags: 520,
            indexId: const IdUid(442, 8867874908424643644),
            relationTarget: 'Equipment'),
        ModelProperty(
            id: const IdUid(30, 6899752367049103072),
            name: 'measuresDId',
            type: 11,
            flags: 520,
            indexId: const IdUid(443, 8751976194561309460),
            relationTarget: 'Measures'),
        ModelProperty(
            id: const IdUid(31, 4101803535176847165),
            name: 'lightsDId',
            type: 11,
            flags: 520,
            indexId: const IdUid(444, 2177789714560177811),
            relationTarget: 'Lights'),
        ModelProperty(
            id: const IdUid(32, 3012195276920336775),
            name: 'carBodyworkDId',
            type: 11,
            flags: 520,
            indexId: const IdUid(445, 657476217401674636),
            relationTarget: 'CarBodywork'),
        ModelProperty(
            id: const IdUid(33, 8535621974771493220),
            name: 'fluidsCheckDId',
            type: 11,
            flags: 520,
            indexId: const IdUid(446, 3825693090286000930),
            relationTarget: 'FluidsCheck'),
        ModelProperty(
            id: const IdUid(34, 5731946712531999849),
            name: 'bucketInspectionDId',
            type: 11,
            flags: 520,
            indexId: const IdUid(447, 551739223749718276),
            relationTarget: 'BucketInspection'),
        ModelProperty(
            id: const IdUid(35, 2593314656940468401),
            name: 'securityDId',
            type: 11,
            flags: 520,
            indexId: const IdUid(448, 8996772627557330004),
            relationTarget: 'Security'),
        ModelProperty(
            id: const IdUid(36, 9217248123693218315),
            name: 'extraDId',
            type: 11,
            flags: 520,
            indexId: const IdUid(449, 5804864913316168266),
            relationTarget: 'Extra'),
        ModelProperty(
            id: const IdUid(37, 5265186408950234883),
            name: 'equipmentDId',
            type: 11,
            flags: 520,
            indexId: const IdUid(450, 5865551881169805159),
            relationTarget: 'Equipment')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(88, 5449780156064882583),
      name: 'CarBodywork',
      lastPropertyId: const IdUid(69, 7980155768179685551),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8619704549570291130),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4857664604114749455),
            name: 'wiperBladesFront',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6314607860315248665),
            name: 'wiperBladesFrontComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2932307915314939476),
            name: 'wiperBladesBack',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7798330572794639680),
            name: 'wiperBladesBackComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6141137134455852994),
            name: 'windshieldWiperFront',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3972296533681936088),
            name: 'windshieldWiperFrontComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2508672601353175811),
            name: 'windshieldWiperBack',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3017322609851710155),
            name: 'windshieldWiperBackComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7042986062575097577),
            name: 'generalBody',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7370161818909769733),
            name: 'generalBodyComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8248962142047861753),
            name: 'decaling',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5561649135905036482),
            name: 'decalingComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6215244236227135641),
            name: 'tires',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5869098321528518587),
            name: 'tiresComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 3697251397158094005),
            name: 'glass',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 8447404666841583943),
            name: 'glassComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 6670366128981306869),
            name: 'mirrors',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 785053915727178349),
            name: 'mirrorsComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 6060806140683192414),
            name: 'parking',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 4146340390175637448),
            name: 'parkingComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 809987713072591549),
            name: 'brakes',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 4431062595118052256),
            name: 'brakesComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 6779107806492877344),
            name: 'emgBrakes',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 4969051730456815061),
            name: 'emgBrakesComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 4284389978323354647),
            name: 'horn',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 5555757982127059662),
            name: 'hornComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 5156744286049715689),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 3055348980492333125),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(386, 4040159493289477701)),
        ModelProperty(
            id: const IdUid(30, 4861213486138912837),
            name: 'controlFormId',
            type: 11,
            flags: 520,
            indexId: const IdUid(387, 691673281428625991),
            relationTarget: 'ControlForm'),
        ModelProperty(
            id: const IdUid(31, 4829554512466907099),
            name: 'wiperBladesFrontImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 2640620538450702667),
            name: 'wiperBladesFrontPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 3175254960942753562),
            name: 'wiperBladesBackImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 1848782613720105659),
            name: 'wiperBladesBackPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 230142026697351400),
            name: 'windshieldWiperFrontImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 3781518740690294133),
            name: 'windshieldWiperFrontPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 5899318396321935211),
            name: 'windshieldWiperBackImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 1383065563183336638),
            name: 'windshieldWiperBackPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 5567812270749266899),
            name: 'generalBodyImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 4518839586080616973),
            name: 'generalBodyPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(41, 639012328149535831),
            name: 'decalingImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(42, 4529273831013949210),
            name: 'decalingPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(43, 2264708569284501763),
            name: 'tiresImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(44, 5873322513630547808),
            name: 'tiresPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(45, 8584286804834001566),
            name: 'glassImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(46, 1836643984421312106),
            name: 'glassPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(47, 5783661081679523899),
            name: 'mirrorsImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(48, 5882390557710018829),
            name: 'mirrorsPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(49, 8793430676972678404),
            name: 'parkingImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(50, 7917297444496874963),
            name: 'parkingPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(51, 5060467692943288044),
            name: 'brakesImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(52, 4363085607101177219),
            name: 'brakesPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(53, 7079275530567002358),
            name: 'emgBrakesImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(54, 2190716812246369218),
            name: 'emgBrakesPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(55, 930155861866315064),
            name: 'hornImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(56, 1861675323202979021),
            name: 'hornPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(57, 721633576761411645),
            name: 'wiperBladesFrontNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(58, 864465889485949348),
            name: 'wiperBladesBackNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(59, 7699437473769752965),
            name: 'windshieldWiperFrontNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(60, 2993703430609252560),
            name: 'windshieldWiperBackNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(61, 5101290660306326832),
            name: 'generalBodyNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(62, 8580912124304768569),
            name: 'decalingNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(63, 5210311964194700556),
            name: 'tiresNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(64, 8638351439504744001),
            name: 'glassNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(65, 7486927741048338942),
            name: 'mirrorsNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(66, 4119170522138643497),
            name: 'parkingNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(67, 6008268570167634140),
            name: 'brakesNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(68, 3647722623988683365),
            name: 'emgBrakesNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(69, 7980155768179685551),
            name: 'hornNames',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(89, 1967166146969188),
      name: 'Equipment',
      lastPropertyId: const IdUid(29, 2911447276000184982),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3072725452176787783),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3117283363978561298),
            name: 'ignitionKey',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8333329632647553251),
            name: 'ignitionKeyComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6647390367307691303),
            name: 'binsBoxKey',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 407614740461923814),
            name: 'binsBoxKeyComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 342899109221328277),
            name: 'vehicleRegistrationCopy',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7112308235468494341),
            name: 'vehicleRegistrationCopyComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8276059830138579913),
            name: 'vehicleInsuranceCopy',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8274120943336880262),
            name: 'vehicleInsuranceCopyComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6976004256566867194),
            name: 'bucketLiftOperatorManual',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4005164948417234132),
            name: 'bucketLiftOperatorManualComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8416327103387530775),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5074896634966387663),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(396, 4862452392618367177)),
        ModelProperty(
            id: const IdUid(14, 4518607710027017519),
            name: 'controlFormId',
            type: 11,
            flags: 520,
            indexId: const IdUid(397, 3197766616825007307),
            relationTarget: 'ControlForm'),
        ModelProperty(
            id: const IdUid(15, 6988705651145085351),
            name: 'ignitionKeyImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 6575205554542907090),
            name: 'ignitionKeyPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 4068856522435732254),
            name: 'binsBoxKeyImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 5476804890996311975),
            name: 'binsBoxKeyPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 6710183096245311186),
            name: 'vehicleRegistrationCopyImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 4229869901527984238),
            name: 'vehicleRegistrationCopyPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 3452000552619110309),
            name: 'vehicleInsuranceCopyImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 6554518725827042837),
            name: 'vehicleInsuranceCopyPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 519264757627627150),
            name: 'bucketLiftOperatorManualImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 6840303418693524212),
            name: 'bucketLiftOperatorManualPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 3742855868234495839),
            name: 'ignitionKeyNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 8746518244739299343),
            name: 'binsBoxKeyNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 5723385204437699220),
            name: 'vehicleRegistrationCopyNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 6122498586817561564),
            name: 'vehicleInsuranceCopyNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 2911447276000184982),
            name: 'bucketLiftOperatorManualNames',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(90, 8674602881210305817),
      name: 'Extra',
      lastPropertyId: const IdUid(48, 2177470350893699199),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8709972951884373675),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1120059456245895815),
            name: 'ladder',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1037887145633687304),
            name: 'ladderComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8239322748961962644),
            name: 'stepLadder',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1233130022738625999),
            name: 'stepLadderComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8778011736686096440),
            name: 'hydraulicFluidForBucket',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4811805052614413042),
            name: 'hydraulicFluidForBucketComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2661459276366961272),
            name: 'fiberReelRack',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 189966141925577642),
            name: 'fiberReelRackComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1182077901815853265),
            name: 'binsLockedAndSecure',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8340552215351434739),
            name: 'binsLockedAndSecureComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8138788067722238621),
            name: 'safetyHarness',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8505113813885290654),
            name: 'safetyHarnessComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 7262620592751800397),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 8624371709447272904),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(398, 6032785798160785110)),
        ModelProperty(
            id: const IdUid(20, 4336579854941035342),
            name: 'controlFormId',
            type: 11,
            flags: 520,
            indexId: const IdUid(399, 2708309320918311437),
            relationTarget: 'ControlForm'),
        ModelProperty(
            id: const IdUid(21, 6747819966582817219),
            name: 'ladderStraps',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 2740760801230344559),
            name: 'ladderStrapsComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 6021848753556347590),
            name: 'lanyardSafetyHarness',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 6795083874400837418),
            name: 'lanyardSafetyHarnessComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 2146841959507437713),
            name: 'ladderImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 281072384224430347),
            name: 'ladderPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 2878210425253510279),
            name: 'stepLadderImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 168432058566144148),
            name: 'stepLadderPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 5810598794218986927),
            name: 'ladderStrapsImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 8046950702915525289),
            name: 'ladderStrapsPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 7999594640745332270),
            name: 'hydraulicFluidForBucketImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 8933468591655519705),
            name: 'hydraulicFluidForBucketPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 5360630065811196202),
            name: 'fiberReelRackImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 3215226994201844720),
            name: 'fiberReelRackPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 8551725128389213204),
            name: 'binsLockedAndSecureImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 197277133232214325),
            name: 'binsLockedAndSecurePath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 8775095795852910554),
            name: 'safetyHarnessImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 5535751631267920279),
            name: 'safetyHarnessPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 5244758581807751519),
            name: 'lanyardSafetyHarnessImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 979362943735015756),
            name: 'lanyardSafetyHarnessPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(41, 7137318328883184295),
            name: 'ladderNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(42, 1191899986526399216),
            name: 'stepLadderNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(43, 4078011197631402493),
            name: 'ladderStrapsNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(44, 1190665946354321685),
            name: 'hydraulicFluidForBucketNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(45, 3077453198357709103),
            name: 'fiberReelRackNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(46, 3665141070950184336),
            name: 'binsLockedAndSecureNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(47, 1061287763650182109),
            name: 'safetyHarnessNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(48, 2177470350893699199),
            name: 'lanyardSafetyHarnessNames',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(91, 6931545903134634049),
      name: 'FluidsCheck',
      lastPropertyId: const IdUid(36, 6002228389480769653),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8448294045453716533),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8359333279617470635),
            name: 'engineOil',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4405371747956559906),
            name: 'engineOilComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3273246250361849684),
            name: 'transmission',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8340302310659703556),
            name: 'transmissionComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1259784602810267069),
            name: 'coolant',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 766461438078361605),
            name: 'coolantComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4233194197929438063),
            name: 'powerSteering',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8609117659014426069),
            name: 'powerSteeringComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8299996407209707061),
            name: 'windshieldWasherFluid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8328158170129160362),
            name: 'windshieldWasherFluidComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 368117682411838208),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 9096587913245800763),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(400, 1217690629761694733)),
        ModelProperty(
            id: const IdUid(16, 272467616661832083),
            name: 'controlFormId',
            type: 11,
            flags: 520,
            indexId: const IdUid(401, 2060194445474862906),
            relationTarget: 'ControlForm'),
        ModelProperty(
            id: const IdUid(17, 2859559509048373666),
            name: 'dieselExhaustFluid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 412239462255856612),
            name: 'dieselExhaustFluidComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 8649771390032717284),
            name: 'engineOilImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 3393003422895788439),
            name: 'engineOilPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 1449249592065502258),
            name: 'transmissionImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 1412509515590104085),
            name: 'transmissionPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 5576218901866419291),
            name: 'coolantImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 9038632771859244118),
            name: 'coolantPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 6267982728959869300),
            name: 'powerSteeringImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 178665630251149211),
            name: 'powerSteeringPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 3367493048565810130),
            name: 'dieselExhaustFluidImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 1856575501559061448),
            name: 'dieselExhaustFluidPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 1754588778840820946),
            name: 'windshieldWasherFluidImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 4065251250855641491),
            name: 'windshieldWasherFluidPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 8948185999924831011),
            name: 'engineOilNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 6900738060565296923),
            name: 'transmissionNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 812687314584159344),
            name: 'coolantNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 1887872237818956744),
            name: 'powerSteeringNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 5465857504719923609),
            name: 'dieselExhaustFluidNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 6002228389480769653),
            name: 'windshieldWasherFluidNames',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(92, 2259630358692179159),
      name: 'Lights',
      lastPropertyId: const IdUid(60, 9053524199853750954),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8208627816511894110),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6047004084709836420),
            name: 'headLights',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1405479752962223955),
            name: 'headLightsComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8503768092651271886),
            name: 'brakeLights',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5280006957504909935),
            name: 'brakeLightsComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2465634570145103391),
            name: 'reverseLights',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7241861824106150908),
            name: 'reverseLightsComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8239416834238681024),
            name: 'warningLights',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3050678265290041081),
            name: 'warningLightsComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 462449233599553700),
            name: 'turnSignals',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8580934387460718362),
            name: 'turnSignalsComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1198146444113834834),
            name: 'dashLights',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6648187002647248499),
            name: 'dashLightsComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 6568051649441053855),
            name: 'strobeLights',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2541792204828558717),
            name: 'strobeLightsComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 7082171303520639033),
            name: 'cabRoofLights',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4999511497438034127),
            name: 'cabRoofLightsComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 2554692808429424872),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 3059416477415854098),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(402, 2125595531649186268)),
        ModelProperty(
            id: const IdUid(24, 376586885543290336),
            name: 'controlFormId',
            type: 11,
            flags: 520,
            indexId: const IdUid(403, 8696872441789594896),
            relationTarget: 'ControlForm'),
        ModelProperty(
            id: const IdUid(25, 7206245804118223822),
            name: 'fourWayFlashers',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 6130594748209463564),
            name: 'fourWayFlashersComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 4204025430741251055),
            name: 'headLightsImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 651251792208035714),
            name: 'headLightsPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 8192793072563171028),
            name: 'brakeLightsImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 1259653141818820918),
            name: 'brakeLightsPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 9136802427750002662),
            name: 'reverseLightsImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 2908253885558862601),
            name: 'reverseLightsPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 4576588471985349313),
            name: 'warningLightsImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 3045669256353133528),
            name: 'warningLightsPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 8461493298142593313),
            name: 'turnSignalsImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 2125840980794175321),
            name: 'turnSignalsPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 225133476847223709),
            name: 'fourWayFlashersImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 6659096647439528224),
            name: 'fourWayFlashersPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 5100233583046559901),
            name: 'dashLightsImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 2352608192502450817),
            name: 'dashLightsPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(41, 5389585471650761972),
            name: 'strobeLightsImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(42, 8954085841986616410),
            name: 'strobeLightsPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(43, 3006597950858729246),
            name: 'cabRoofLightsImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(44, 3129329232292099901),
            name: 'cabRoofLightsPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(47, 552566993002683012),
            name: 'clearanceLightsImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(48, 6853920016077470023),
            name: 'clearanceLightsPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(49, 7964057907774140886),
            name: 'clearanceLights',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(50, 8185845797277935491),
            name: 'clearanceLightsComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(51, 6398353176253921598),
            name: 'headLightsNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(52, 4347238691562747856),
            name: 'brakeLightsNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(53, 7642099312440741782),
            name: 'reverseLightsNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(54, 5421930901691050710),
            name: 'warningLightsNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(55, 8309634184472663939),
            name: 'turnSignalsNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(56, 7957648996389078924),
            name: 'fourWayFlashersNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(57, 6234890245623602698),
            name: 'dashLightsNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(58, 2763924249766062054),
            name: 'strobeLightsNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(59, 2598109402329184447),
            name: 'cabRoofLightsNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(60, 9053524199853750954),
            name: 'clearanceLightsNames',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(93, 2233886934526070371),
      name: 'Measures',
      lastPropertyId: const IdUid(17, 2160032523892340661),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5173735046304740244),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 441633590608724092),
            name: 'gas',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9176377168275984732),
            name: 'gasComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4901451049974007829),
            name: 'mileage',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3752230765420637088),
            name: 'mileageComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 510904680295417049),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3643296565612311359),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(404, 4948419500790357301)),
        ModelProperty(
            id: const IdUid(8, 1349797551475487582),
            name: 'controlFormId',
            type: 11,
            flags: 520,
            indexId: const IdUid(405, 4985468126259660819),
            relationTarget: 'ControlForm'),
        ModelProperty(
            id: const IdUid(11, 6534051827084921333),
            name: 'gasPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1377949001494033132),
            name: 'mileagePath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8182480157568429029),
            name: 'gasImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 1526850249302200358),
            name: 'mileageImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 3207989437886791222),
            name: 'gasNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2160032523892340661),
            name: 'mileageNames',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(94, 5644194863526468119),
      name: 'Security',
      lastPropertyId: const IdUid(38, 623197207306021348),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6663492625810694939),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2213878320476735662),
            name: 'rtaMagnet',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6767144360413407304),
            name: 'rtaMagnetComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6375108429317891250),
            name: 'triangleReflectors',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3070268730124949522),
            name: 'triangleReflectorsComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8154471083753542136),
            name: 'wheelChocks',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3087051519473631442),
            name: 'wheelChocksComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7841690536174758992),
            name: 'fireExtinguisher',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 448622215395985354),
            name: 'fireExtinguisherComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8302026893968923691),
            name: 'backUpAlarm',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 490080706405471104),
            name: 'backUpAlarmComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2315426250172158846),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 243947351103443722),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(406, 9095751880144883814)),
        ModelProperty(
            id: const IdUid(16, 5892128162037807776),
            name: 'controlFormId',
            type: 11,
            flags: 520,
            indexId: const IdUid(407, 9019948739099780499),
            relationTarget: 'ControlForm'),
        ModelProperty(
            id: const IdUid(19, 3760431652062174028),
            name: 'firstAidKitSafetyVest',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 9135334680922231986),
            name: 'firstAidKitSafetyVestComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 4349027243144292132),
            name: 'rtaMagnetImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 3985558570528896044),
            name: 'rtaMagnetPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 2398632740854976730),
            name: 'triangleReflectorsImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 5013286954297342559),
            name: 'triangleReflectorsPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 6703522491612748052),
            name: 'wheelChocksImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 7069996747207340882),
            name: 'wheelChocksPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 4576876205262799154),
            name: 'fireExtinguisherImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 4553038228940417488),
            name: 'fireExtinguisherPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 1118464093576636584),
            name: 'firstAidKitSafetyVestImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 9187357130956455260),
            name: 'firstAidKitSafetyVestPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 5653129467005165663),
            name: 'backUpAlarmImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 9000716974812315489),
            name: 'backUpAlarmPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 2939174103460502480),
            name: 'rtaMagnetNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 2997777527102330871),
            name: 'triangleReflectorsNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 712955286217784917),
            name: 'wheelChocksNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 4684762422993863717),
            name: 'fireExtinguisherNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 8883061154236039475),
            name: 'firstAidKitSafetyVestNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 623197207306021348),
            name: 'backUpAlarmNames',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(95, 6627618922528083180),
      name: 'BucketInspection',
      lastPropertyId: const IdUid(19, 2784115878611209341),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2215812487156471029),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3759966310685337768),
            name: 'insulated',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1842639606934335421),
            name: 'insulatedComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8414077743308917853),
            name: 'holesDrilled',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3587379113484372313),
            name: 'holesDrilledComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3126833118459054351),
            name: 'bucketLiner',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7947269768364501881),
            name: 'bucketLinerComments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5545972869869232542),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3098747219753164134),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(408, 8292894974272749624)),
        ModelProperty(
            id: const IdUid(10, 4502744291640685571),
            name: 'controlFormId',
            type: 11,
            flags: 520,
            indexId: const IdUid(409, 2155515461166987875),
            relationTarget: 'ControlForm'),
        ModelProperty(
            id: const IdUid(11, 6540963720053674462),
            name: 'insulatedImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4705986309774814830),
            name: 'insulatedPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7455827792847925614),
            name: 'holesDrilledImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 848389278839566549),
            name: 'holesDrilledPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 9221919246410615414),
            name: 'bucketLinerImages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 7424535712805857294),
            name: 'bucketLinerPath',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3629474722692737121),
            name: 'insulatedNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 8214958607267505857),
            name: 'holesDrilledNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 2784115878611209341),
            name: 'bucketLinerNames',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(96, 2204100493351827724),
      name: 'Company',
      lastPropertyId: const IdUid(4, 5483261049025145217),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1990190387171952169),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5883599551323822621),
            name: 'company',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7716905942146128879),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5483261049025145217),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(412, 4981138639668232364))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(97, 4052095333394296256),
      name: 'Role',
      lastPropertyId: const IdUid(5, 2006292341464236205),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1120608919096143979),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5368560685332317129),
            name: 'role',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 680253610766291074),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2858837025365832615),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(413, 1190219723845232731)),
        ModelProperty(
            id: const IdUid(5, 2006292341464236205),
            name: 'bitacoraId',
            type: 11,
            flags: 520,
            indexId: const IdUid(414, 2275477307342719568),
            relationTarget: 'Bitacora')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(94, 3237800967580094266),
            name: 'users',
            targetId: const IdUid(100, 5432875809935853718))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(98, 4907560803572122681),
      name: 'Status',
      lastPropertyId: const IdUid(4, 5584602233699730989),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4661672479596905138),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2500316856417719453),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4558209150887984640),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5584602233699730989),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(415, 7428404536933406429))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(99, 8193815974638102829),
      name: 'Vehicle',
      lastPropertyId: const IdUid(34, 4597880471000569725),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5171326281111880325),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1360795067369486650),
            name: 'make',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6511545282247935467),
            name: 'model',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8917761268606995569),
            name: 'year',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8400343372362527324),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7467789804052333224),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3516490678714010667),
            name: 'vin',
            type: 9,
            flags: 2080,
            indexId: const IdUid(421, 8203889751631662671)),
        ModelProperty(
            id: const IdUid(9, 4880312502650608536),
            name: 'motor',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4061390792292035318),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3087375510280926034),
            name: 'oilChangeDue',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4219254653978239483),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 994325740940550622),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(423, 1082261063868053730)),
        ModelProperty(
            id: const IdUid(16, 3644817046309974834),
            name: 'statusId',
            type: 11,
            flags: 520,
            indexId: const IdUid(424, 4738256906674152801),
            relationTarget: 'Status'),
        ModelProperty(
            id: const IdUid(17, 2392770978932015033),
            name: 'companyId',
            type: 11,
            flags: 520,
            indexId: const IdUid(425, 8708627097459420669),
            relationTarget: 'Company'),
        ModelProperty(
            id: const IdUid(18, 598775386392949340),
            name: 'licensePlates',
            type: 9,
            flags: 2080,
            indexId: const IdUid(431, 7457722984787952526)),
        ModelProperty(
            id: const IdUid(19, 753662785621719297),
            name: 'lastTransmissionFluidChange',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 5120493280338495896),
            name: 'lastRadiatorFluidChange',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 8352018641470727015),
            name: 'ruleOilChangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(460, 1848952131797483781),
            relationTarget: 'Rule'),
        ModelProperty(
            id: const IdUid(25, 228343166392005061),
            name: 'ruleTransmissionFluidChangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(461, 8280925250993398609),
            relationTarget: 'Rule'),
        ModelProperty(
            id: const IdUid(26, 2951023088220282595),
            name: 'ruleRadiatorFluidChangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(462, 7080116891369577106),
            relationTarget: 'Rule'),
        ModelProperty(
            id: const IdUid(27, 8143417845914793514),
            name: 'mileage',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 8651665951337944013),
            name: 'carWash',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 3299131353643929306),
            name: 'weeklyCheckUp',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 2230459753270718169),
            name: 'filterCheckTSM',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 4598683369211093637),
            name: 'lastTireChange',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 6610378205763130232),
            name: 'lastBrakeChange',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 463082300819899243),
            name: 'ruleTireChangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(466, 6468799379941506071),
            relationTarget: 'Rule'),
        ModelProperty(
            id: const IdUid(34, 4597880471000569725),
            name: 'ruleBrakeChangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(467, 5918560134820692401),
            relationTarget: 'Rule')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: ''),
        ModelBacklink(
            name: 'vehicleServices', srcEntity: 'VehicleServices', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(100, 5432875809935853718),
      name: 'Users',
      lastPropertyId: const IdUid(29, 5167023569986539374),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1691159711547820181),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 3033483373682294491),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8362457446259075757),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5308168927245456385),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(427, 5085355049960878404)),
        ModelProperty(
            id: const IdUid(15, 4992689228785755337),
            name: 'roleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(428, 2108228131932044823),
            relationTarget: 'Role'),
        ModelProperty(
            id: const IdUid(18, 553158857743073357),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 7024714412515108530),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 6865396380980820550),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 5167023569986539374),
            name: 'imageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(471, 2935817121366324441),
            relationTarget: 'Image')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(95, 6290694263020334239),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512)),
        ModelRelation(
            id: const IdUid(96, 7279223846688382106),
            name: 'roles',
            targetId: const IdUid(97, 4052095333394296256))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(103, 6506912454200410370),
      name: 'Service',
      lastPropertyId: const IdUid(5, 876441944441595286),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7711125536966213228),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5735173036126986929),
            name: 'service',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4948177709004164371),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1851729669128907311),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 876441944441595286),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(453, 2696589783959266857))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(104, 7552456267933993914),
      name: 'VehicleServices',
      lastPropertyId: const IdUid(8, 8407820225729691134),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4884090815800841879),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5040655732706547230),
            name: 'completed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2381111809232512802),
            name: 'serviceDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3871423033336002983),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4445422548433351296),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(454, 6081270978273527418)),
        ModelProperty(
            id: const IdUid(6, 1001262051718150676),
            name: 'vehicleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(455, 7650187170719748019),
            relationTarget: 'Vehicle'),
        ModelProperty(
            id: const IdUid(7, 7912496190957608505),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(456, 4454022439719093874),
            relationTarget: 'Service'),
        ModelProperty(
            id: const IdUid(8, 8407820225729691134),
            name: 'mileageRemaining',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(105, 5673404938280062340),
      name: 'Rule',
      lastPropertyId: const IdUid(9, 2917639864279038227),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7707060264455187470),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 2159862586228346310),
            name: 'value',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2119373709216005899),
            name: 'registered',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2738945767052565490),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4654155028501052373),
            name: 'vehicleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(459, 6448042828244613407),
            relationTarget: 'Vehicle'),
        ModelProperty(
            id: const IdUid(9, 2917639864279038227),
            name: 'lastMileageService',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(107, 7007361126005261051),
      name: 'Image',
      lastPropertyId: const IdUid(7, 4001936992587078785),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7973461217775067496),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4333040609588315824),
            name: 'url',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1432567491637188080),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1241143102412648913),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(470, 2087447231950941032),
            relationTarget: 'Users'),
        ModelProperty(
            id: const IdUid(6, 3590293248500275666),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4001936992587078785),
            name: 'base64',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(107, 7007361126005261051),
      lastIndexId: const IdUid(471, 2935817121366324441),
      lastRelationId: const IdUid(98, 3803692598585200085),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        1366246136666677579,
        6117759740444770997,
        2166617641346171935,
        3964965102569712035,
        3815886273064837669,
        2781408684735737577,
        2428686942234365602,
        1323666498433169999,
        2042416188864880761,
        1021087970446956343,
        4631117986834657050,
        3867794090434878240,
        859399381735454083,
        9001070558566127547,
        4156773254590137275,
        4450301343199944733,
        8904698342427392465,
        5712399432718906025,
        416402482060153165,
        5431167889155729582,
        3199858035416333747,
        6171792505504710034,
        7989753976020672504,
        7625539946193612618,
        6276906075580230896,
        6250629756136671550,
        5100626670541562876,
        6058346533219474088,
        311544265460535081,
        7673785883081583133,
        5075853906068129300,
        2491530739310255510,
        6358146304075079104,
        485586835672622394,
        8382413157677919073,
        8975733277369074245,
        8172937846526815489,
        7727246235344048855,
        4406411524870188538,
        1596057038243167918,
        2607346891989518545,
        858406953056318390,
        6006155563437934053,
        7644021050378277919,
        6615538153946220074,
        334643984474072026,
        6229275484692578053,
        1811709022167361315,
        1304959332947864171,
        562207686048996243,
        5382242557058931829,
        5659431982863420214,
        7028042862098546470,
        5212286852224162052,
        100215042722630549,
        8669365513736941915,
        7277108221751789003,
        2397636268740769237,
        794331956868775333,
        5967866020755512418,
        3167743746507035878,
        804684152773215409,
        5935206935227986130,
        6428801880818699617,
        6169138316575027919,
        3713927666656252399,
        194731522577233837,
        7402766830593382424,
        111540169671743370,
        3609614765671064101,
        8182885394159286166,
        7992280240775612538,
        2743501254910091798,
        7969214193083467450,
        8431482435154692484,
        2641322679545348634,
        7390367631800539092,
        4540381477586942588,
        4655965125693160849,
        4316068055351042612,
        8367470477068670691,
        5004962762570684805,
        8177890023282011956,
        5787722657754964069,
        252808688812742776,
        2554695376397258853,
        3290269878544238397,
        5179761477110208081
      ],
      retiredIndexUids: const [
        8990521503430950587,
        1607831315029447998,
        2758117709587171439,
        7680390338130917281,
        7083281142493979324,
        3380866187592452154,
        898977627675318720,
        4860061050288630164,
        6477492978039659709,
        1884784676683692244,
        6230644741850799714,
        1222153075892218921,
        6456431794726392868,
        21923039932233953,
        8302583708064681419,
        1826338943965397138,
        2193715064152120120,
        4181153384410572043,
        76785533892443862,
        6725194506411062036,
        7912925179002849310,
        4669749725996081754,
        8481960757171179551,
        8868718449044949040,
        6694951196945837935,
        1067877610717947502,
        1990533507654861339,
        2290535798159386957,
        5140011308328673057,
        8062585399034389472,
        668466277065793709,
        360897725695503763,
        7003598226496598726,
        8154602671126157109,
        7569304066565191687,
        5035905392252920596,
        7510634053082529540,
        8309315416341765269,
        1728042511720879376,
        8396189901550464501,
        2386897909389581505,
        4608900919778481553,
        6162710869800712054,
        5632813823143218712,
        3039839111509637856,
        4999127753969735266,
        4208244129974519526,
        351407541415946384,
        8191067602968359312,
        6721811467857329542,
        8251082717356223611,
        2449024482161215302,
        4751856482932078104,
        9172016749357144224,
        9045688124770187728,
        4686570526947596743,
        2390143391685661460,
        4184900663065585925,
        5311167113567925142,
        7511884360991073275,
        4941615724051327288,
        3757107251813869820,
        1504702329259649475,
        915767699699149923,
        3660023615256333447,
        2602398023047257003,
        3185270439084282343,
        2068950816938160691,
        3859715238384420022,
        9136053496272878218,
        6237524852571718855,
        3046345138494460818,
        757620389220931349,
        6054000220007838196,
        8109192583242144861,
        3727619334081925690,
        9031244164717773135,
        5205191834236384758,
        4197992763805738004,
        6280604761802477456,
        6386641065826609180,
        6945808217463090366,
        7213593374400816024,
        3278468930080545812,
        3515742937905774685,
        4711016057441657243,
        6819357173724328820,
        7814733577456564055,
        8145611823764249187,
        6478200980709363370,
        7654248222638135302,
        5701493849060623154,
        7212478636626616580,
        2832474624750008637,
        3255239488718953367,
        1303728899213693580,
        2557270521250487094,
        5634261937595659822,
        1965550973427455088,
        8338339517316328460,
        4489600343659936888,
        4402712870398339367,
        8157857300952537532,
        6686263885413674781,
        8523822191732594212,
        69675433781937515,
        8811611690106049466,
        713793477301725008,
        6763248896344001454,
        3029635981322260859,
        530782811209096402,
        5375138088732281764,
        2457468952970496864,
        2893911726871456069,
        5916027695817265200,
        4481819197045105238,
        485661063447907108,
        8708498230408183714,
        3992374126221858894,
        1775900829394429954,
        2381769723952164502,
        7302368435975826295,
        2002401092371240826,
        2269028587050617485,
        6682874173406097296,
        2361876396703109126,
        3340382302793284993,
        7638733067445510244,
        8225671083316443571,
        7330226207696814681,
        6767241145070274732,
        5783738241510611326,
        3350950497497969535,
        1186035180202240577,
        758836899834110068,
        370237648053660087,
        221036229575549643,
        2908751672841509107,
        6457619861549834438,
        6286964184448623398,
        3897805815254755813,
        6543979908969061495,
        8629799518235793864,
        2076068900619511099,
        6914145295119698584,
        3071001570087288716,
        5332962881385054503,
        199666736918557477,
        4588799358054363302,
        1815195187478967690,
        7553900630667516810,
        2182435642457260945,
        8685125260427970668,
        3403559951066700930,
        9038695532186726245,
        2303801916463691192,
        6692076237910304150,
        4414320023330082672,
        5249064443956429852,
        3361789893351489509,
        2071126468008917387,
        8629614743217635052,
        3465217592313559940,
        8154917778766995021,
        504837245352985312,
        4800753572139945092,
        7566237706448790608,
        1215468110805298241,
        7713453128820497698,
        5311425645938031112,
        659698341661181318,
        4626339537674908557,
        1080738433399291753,
        6964699696323522363,
        496185777107324813,
        2707715113785547372,
        6907220557239226145,
        3683821233501424578,
        8460461020124898604,
        511123064934859743,
        3869783548311038350,
        6503931786110492839,
        2449500294187427335,
        6620294353064759547,
        1593517483402803417
      ],
      retiredPropertyUids: const [
        7079790605743243388,
        6172998306654734553,
        2574672497671950469,
        5347718656034637228,
        6273269044269879201,
        7911475855340885994,
        5829103266196707853,
        7515124161780938608,
        3991281244965765077,
        6017954821795207299,
        3980554204008347119,
        9086365290951858859,
        2452280981631945624,
        8341443670952491819,
        4551103649348469546,
        6909534581842096739,
        5386075232935579859,
        4364625688543508975,
        8474005816611301515,
        291034994140840826,
        7245017250220973753,
        552297950480807692,
        5889322915921969172,
        8304755835049178217,
        3462034544506880697,
        6915994077861086090,
        4932511096555161847,
        3662632218083065242,
        3180136282497114098,
        647799949869266031,
        3681945340148367110,
        2965121636634238955,
        2158551797062253471,
        6431279296723446945,
        176765185759695924,
        956997601706550466,
        3714019547848860305,
        4653993271322157592,
        7633603347667974425,
        3889022425921663783,
        3593890741921782419,
        4870033424336565884,
        6196634665502618124,
        702060131665322309,
        6834895970095104912,
        4298168455532229057,
        6494676936156636610,
        7984657088306364599,
        3469221558317808806,
        7657355535786071996,
        1460263094824080539,
        3348596078791966503,
        6686642139452024167,
        7280661973312265839,
        232832489478303902,
        7424242419126398301,
        4735971027860097783,
        7275271439444339569,
        5329076299621472283,
        4790639327797463942,
        4028495148250116114,
        7930195933533868005,
        7269234199457887678,
        3045954521590561959,
        4548731095880486014,
        3917990569343711155,
        804388285645815931,
        7240701117028268274,
        7020232340501817282,
        4082213459028815417,
        509412325826203117,
        9047558658118118651,
        1406568894842036273,
        8202387200314019143,
        6701648872907734361,
        7104768524590771840,
        7655032466536069673,
        1965574186271044849,
        1382509944249718626,
        8283328889428416807,
        3394511564896037854,
        8624158494612522146,
        5474615315576449195,
        5081084557109504408,
        174707286127388287,
        4444011821186412409,
        3952098520364674379,
        3879749783315811280,
        249851165958766302,
        7867123722378438362,
        891222057461627616,
        1618039077907563691,
        8586458724268756786,
        6140184920981313822,
        5626746320301529232,
        1758281922018199377,
        317028010342762687,
        6994977916160921655,
        6540004964666285680,
        4856817907692795203,
        3441574004683600331,
        2310204940504377436,
        8222154448043311087,
        7833602918531477435,
        6543222186554661806,
        7872004360843974627,
        7851399595546166337,
        5833972560963993700,
        6559411272338609235,
        5059986275729243897,
        4022221953004300558,
        6624197140138252342,
        9045113882157341306,
        8564976400204004342,
        5719240336153726962,
        1887404940434801966,
        5046680042193038920,
        3788539490390442542,
        5992135025932841446,
        6280052136229997375,
        3221284138384568926,
        8861650403401684419,
        8988217608763532952,
        4387081276626837570,
        6161823828674097276,
        6939545807929048684,
        1388327886429615646,
        3312783263241748230,
        782321710570789969,
        2948145743703110893,
        4090875136723971084,
        7992450668665361714,
        7899142688428235984,
        3895257262356450605,
        2584782002890659583,
        5582579692261011195,
        5028158787265648369,
        5407152779426357701,
        8462464237235982526,
        4309447383493916637,
        7521607225935953493,
        6944626713596755992,
        5691040412648373501,
        4570083749155237849,
        2012161149637737564,
        4111001027425517669,
        2235592658688426627,
        3514219219156834755,
        7900770007418559960,
        8727843019342851116,
        2246275948466157951,
        6828598007871134254,
        2210981706424940712,
        8149625297125514299,
        1774385922646110264,
        3611757609493769130,
        1550628132673256737,
        7401453084951799987,
        4168434124669331468,
        4273736957162077610,
        7661096811192140465,
        5032172720157635791,
        3640667548502545688,
        3227581588275626757,
        6169031405257917919,
        3603888931156625013,
        3770705136894608488,
        1431194771886016233,
        6126515006975107011,
        3911938135844163773,
        4915654780717530161,
        8381385900840453390,
        9041506210264243534,
        5688593427736897311,
        4321064732987742364,
        7181885270107922782,
        2009950526621565134,
        4207552670152335906,
        8160792045369167469,
        51738632601896353,
        5323371369283368342,
        6235156017683811675,
        4723303053259007258,
        1466612933068041934,
        7248362350774841303,
        2253290332606608104,
        3861064722112440270,
        5941389222733156371,
        5633075432279483197,
        4527500675980092790,
        9063014267953462768,
        8360434748618374218,
        7365870445831650995,
        3759249699517018075,
        6849128927415581526,
        8522845507667619183,
        5798532042156117000,
        3271066234268233916,
        5232955354127678356,
        5328095077095537181,
        6284051672797193414,
        6365319972112587915,
        6606890237353721944,
        5628367501338126181,
        1436917224247812157,
        2708316285260983524,
        7432480190168004450,
        2507416638338706911,
        6999119836743433970,
        8092664882881749647,
        7640856879689498744,
        2514991401100204571,
        4261138498742165746,
        1991668705024615469,
        7520457943588733683,
        2599133563664475584,
        7137124187474983956,
        2112559093449404088,
        5332627173857470047,
        7823032235829845864,
        5194084986301717278,
        5115364499969904783,
        6009308139323565775,
        6436825515766324219,
        8007102102988426437,
        1496705341694862790,
        6894534887589015141,
        4600259317593251919,
        5834614544621841095,
        8799259518463538181,
        449037016119055988,
        2419646048913111562,
        4721663583478119690,
        6765211601357784849,
        3393149240246558542,
        7472871579384853493,
        275024665070143236,
        2126016403256222143,
        1952396127837611647,
        6263613128532982614,
        7057232621627471855,
        1415385875565521100,
        7518146399129654640,
        7586360301405444917,
        6833710803124238256,
        8088892015231071856,
        3956724533417333522,
        3802715731545668143,
        8987696372421294752,
        8350117130262616151,
        3226014301147360143,
        1749816194949685889,
        7758743809194774648,
        1434391940339194549,
        4623941556925944192,
        9195889777899967802,
        2893504049285370318,
        5345396877052834205,
        1400701969453774196,
        5435904696509668912,
        1088034900596660184,
        6457036745520664238,
        329513595407028238,
        8604127764333477699,
        3921580369470275470,
        4505898125473094823,
        1754855625365573914,
        2688995114984003410,
        4567358900391945362,
        6845935698624323595,
        2773772202661284417,
        2001355623132513549,
        7664581841173068663,
        6160806538756599358,
        2551966599607042405,
        7293987934442232642,
        3172314971365956702,
        3554819703177446556,
        4594205475808180169,
        2628466040035596378,
        2797366167647637102,
        9187449762833663479,
        5330112956647391083,
        6268936666042370793,
        3609499592862844276,
        2161445370582181331,
        5352355597565608794,
        1489335028833638286,
        730995717057334540,
        788509268808624474,
        8197216700245087458,
        1058132069139629169,
        2446617551955001742,
        805717021218324759,
        7643887216735876476,
        9142089170751540909,
        1684532864788042377,
        8975130600421841117,
        7648666853331914628,
        4558674622852289053,
        2523510470982254727,
        5717982191828585500,
        6400590468977833336,
        4099773729934801460,
        4936784167570705480,
        4146278510371356915,
        8393564967718994929,
        750503135074981822,
        1451691398555027008,
        5402067026758483430,
        8419912223875279112,
        7523160709471259470,
        4987742386121890857,
        5093668385616053021,
        1992449025228530298,
        1159353226151624190,
        3471162061504283542,
        6571394880654245343,
        5402279733305696715,
        2791771992441857032,
        7512328834379262750,
        3838759675906565787,
        6577146346869035587,
        167975598346545172,
        3094524758543608718,
        7425711578863477823,
        1398624415618011183,
        5624992512158933426,
        4506279727422550847,
        4450405447758241168,
        2418703915789470072,
        1964545965879321706,
        3359767737465312075,
        1119031807460084459,
        6054280734454924450,
        4531064320013580940,
        8248520317372484827,
        5265993208408913698,
        6297297404552520338,
        1043127547320240698,
        4514912785627669612,
        8577618512929462620,
        388728847284978909,
        3965200016558188555,
        8614986762524892139,
        6710403503072460685,
        530608803701318774,
        7411525460197573173,
        8319252168650042041,
        6277362090783645144,
        3443423026800618837,
        9106146166091297461,
        5040892531881832164,
        6085897070753344619,
        6670748245644266493,
        3616607795938519256,
        3377021311219989159,
        2308969436247945089,
        1541820519869477454,
        712360340788966504,
        4970528658792456347,
        2787466043197643742,
        2331261162579149674,
        1532225114633300870,
        8729884026583326624,
        5951979229393608679,
        5162288244745793053,
        1314237784956713205,
        7041119885018323941,
        5431856584957283846,
        8889823374666441278,
        3148729869057314786,
        8791841775805765497,
        3821015968441469978,
        5222079827570678012,
        87293066711590796,
        8885131783820316498,
        3715155887157026250,
        8285343895130438747,
        429722851893671768,
        4261604311738999975,
        5026232333015543017,
        3636328042280877759,
        1498174391682013886,
        217979591081755395,
        4982602150232490228,
        8062410051394054856,
        8390754601530441060,
        533305253152089088,
        4175555395084776827,
        7468202760391464931,
        3325459040369815966,
        2319564184498508408,
        5630061134539575344,
        8386730720267544453,
        4330157751559637236,
        397638224005716367,
        3779379054940407382,
        6772946936896296896,
        6532186673116404834,
        1488410309800825779,
        748875377023563317,
        3552854491581449237,
        4772008941693181500,
        677332732810007841,
        5979281379101082134,
        2413860551118199294,
        4858378161463265971,
        4891573414299167623,
        4714516556889829554,
        2426439504707864094,
        2537752804515452942,
        7110925718061362795,
        6258211936753955292,
        900705157350773814,
        4907586445446392728,
        6672935990570244391,
        7561241731767258348,
        4444561754178453511,
        3529393499177674234,
        3959630620037866869,
        1842463129407517048,
        1303969564249935695,
        6490506020631406852,
        1402395516104320476,
        5860205113185975136,
        8915905491367744850,
        5010841770389356201,
        6698964233104397495,
        3514354406731350672,
        4433239802450158965,
        8866915593674479010,
        2139629849183696076,
        7906326577399145661,
        5823608424634900217,
        5759260250882224252,
        2561056730102834673,
        3843038384942165449,
        4902247676630630727,
        1933555606703313228,
        8014791709560172837,
        3881874201994923632,
        5064642112222430336,
        7410991421173790048,
        609327474518802635,
        7369722519639465454,
        3679854591609531040,
        195209596343901530,
        6214653352507297699,
        6170236630099654648,
        1609489238474676070,
        6358759877557227346,
        498346413789251837,
        3362702631639476479,
        5712771709171787916,
        4791150844778521105,
        2354079124955583253,
        8889235360537659107,
        1735839774357730150,
        6450285659452861803,
        744399421319379407,
        4426375179141119539,
        2135837894165709071,
        5845226999957833968,
        2777595135217905192,
        5063104180889118220,
        4324338883283060091,
        3826283846521524993,
        4378203071035232794,
        8426332937359075528,
        3678492327230106894,
        679198805912964589,
        6017416368221530385,
        7149773872288751418,
        7761086571426781835,
        1101610762497147019,
        7828986895200618322,
        6094806201443064731,
        8849603484316850022,
        3722514468989464909,
        2243660346200626574,
        4694457206836110411,
        8138687838003749892,
        7857354936296959346,
        3433062347635299317,
        7908243977080491158,
        2999215295973720507,
        4117349148605079338,
        4408277863979840317,
        770565802267609172,
        7798777902579264472,
        5476718282839441262,
        5174371667876691074,
        6552210119824315394,
        6031532578549188804,
        2602374307196861226,
        3793969537050688732,
        2515638413658999127,
        8345237608695833363,
        3691935462996643579,
        2405594339854436878,
        4085376825497202111,
        7233356352073964903,
        6805352315537467118,
        8462186556978795783,
        4973645824824210931,
        359111385444592456,
        6948596352627655480,
        2276817419616758245,
        3259635853753189453,
        7273728351083527051,
        2485071929341118535,
        5622714150718426006,
        4957809651365819857,
        1023981078206490618,
        1203964760339024637,
        1140796397664543605,
        6009325388434615334,
        3290470358321974846,
        3745072739738376155,
        518771665974988424,
        7341904985707626523,
        7390334429251842194,
        8938847561919678381,
        6988363047260355471,
        2167749983676750959,
        4465631852815783681,
        6295741357351637114,
        4183204359112636458,
        218677502596731995,
        1565136780225606979,
        4403299478097620527,
        4330832673145927863,
        4169353112900453047,
        1195033526548793243,
        5892986395429184015,
        1735856656110822140,
        5003187748529407805,
        3418457446093523722,
        1494248539864097608,
        8902199047831449277,
        4879353849688490270,
        8734737385801163286,
        1023970263587459046,
        8052147635774927584,
        4525960762311388402,
        1632781054791534436,
        3670268531659226139,
        6444224325059561140,
        4911734169367996461,
        536537212247113032,
        3877780690782221807,
        715541101644565130,
        1851395674978117833,
        201009305971585248,
        7207114180017655793,
        3038192423314954586,
        7516838797346420992,
        2098409856135981629,
        325137281375943384,
        6584156735266522728,
        2963621576722390086,
        8605556586939591362,
        8800100372581327104,
        8730242443265006025,
        721387320777571889,
        5885740297519224064,
        4568878887845057899,
        2953175511506922439,
        2840569838441538888,
        8944844315150541404,
        2660299098597049972,
        4495471650360650211,
        1340243202863340307,
        3354600507596039521,
        4942093323471171099,
        8933146656611953476,
        8369695090390803726,
        3101198272334121532,
        3651614083986583572,
        5403234117840867506,
        7402881280207170997,
        8809667950868572312,
        8956151736497272082,
        4661688415424027549,
        130051233404825466,
        1756012209187183210,
        1731712842219867702,
        5399121294798371700,
        2702753041033734925,
        4293383646830114252,
        5153439313644065044,
        801597087049948180,
        8735741652297119805,
        6009298259383481514,
        3715048591191326703,
        2695423455764152197,
        8884785903112782614,
        2811901041029349773,
        5054656386255573113,
        4785767606920915006,
        5891548134257716403,
        1484676459896345649,
        2702587581297719928,
        627179554347977552,
        924042896960532318,
        4253240073651518778,
        9188143602532049857,
        9068672088910412439,
        7123252788145912746,
        8509517577700052266,
        898724826382222644,
        2168687520283812027,
        5446471853032327793,
        1996743748672640144,
        1760142579483909833,
        6205972270821820963,
        6844452117923663757,
        293831517252750520,
        5782809536948366393,
        7098281571946668829,
        1953991286215743323,
        2320402032859380061,
        5836263409631228918,
        2962342881882180254,
        7173197756596644756,
        5371635900277927694,
        1067333676182017423,
        540581268254452076,
        4138129769667715666,
        8167911247644741740,
        3130190475947679170,
        8854015765007058080,
        1340449646880882038,
        8691913441763965844,
        5889902574621776672,
        7569582722522307025,
        3303189776667867823,
        6159336605849364287,
        5805002687075125842,
        4929476139671102849,
        3704745103843410671,
        6787102826169269276,
        3046162981313169219,
        8828754073992079976,
        6256994399710891559,
        509082260407869804,
        7687625504079176559,
        3848426801060822468,
        3653683242709456146,
        4180733650669661655,
        5483311360990604043,
        6397496033575130961,
        7803251753327258161,
        4420051813097480449,
        1346415551296560367,
        999937020643046967,
        4939758375178121758,
        1898388958620666182,
        3626156555686478411,
        4437359734776404765,
        4613301727320737404,
        8250405244079524719,
        1196238384957646948,
        3967763482680592378,
        7689442594664249010,
        5704405114348775567,
        7805692380146964309,
        7556478417341751322,
        3895511561300571603,
        3435717903735435465,
        9188564848873461175,
        5902996508639511542,
        8192697722688898302,
        4228686267256851633,
        4482941668440171912,
        8021686265792875560,
        1747257805174508181,
        6157324509682149666,
        1038874851836746200,
        5155663315652452134,
        6961848778599443170,
        253269936084193423,
        421952904768485177,
        6963090433423275111,
        7133744049015284017,
        5189588664183404315,
        8132421813588938084,
        5478925107666142516,
        2137914798752697607,
        4152954067029024740,
        9213895077009524929,
        1868100954971560176,
        5330889346371171696,
        1067165614728355184,
        878857116301657281,
        7281562487153752742,
        3601066374755293931,
        2016948444927180239,
        1663982090695204674,
        8645563325765495312,
        8793093698124241452,
        7056448703456479325,
        8224899873614020012,
        4677830973327539513,
        3655261249465798823,
        807468286336679069,
        4225051604479617429,
        5126173959103968444,
        2815575313211393813,
        400732199218356134,
        9067992503886811416,
        8555609759623119270,
        6903190290684851827,
        6585524487399118671,
        7788765518671870184,
        2352000377987118230,
        8492288376663323770,
        8296591369216985087,
        2526752159936628840,
        5844943379902337314,
        3094640215326290163,
        3454551053068243038,
        6984767539937700275,
        2176231875232329202,
        3321044260440226459,
        7805687423956353446,
        3132589332101803124,
        7299988902361138060,
        3705082018373080443,
        737096913000232805,
        2273294436203332185,
        9159429507851055399,
        7527339157164656864,
        605237792120356083,
        2971104627899873739,
        5050726085676383011,
        7723558054890044016,
        2129861730720673334,
        3918405948041939496,
        1880547944969244836,
        3365272668340359628,
        7287601138491933738,
        5331836423271060866,
        7654551223914586010,
        6988111336556761,
        2108000366401092803,
        7122234269288979042,
        4115903305292342690,
        4203156006095368368,
        2622731725629235359,
        7079987813871341317,
        7803421008754010390,
        8776328160547757904,
        8582847983321332165,
        5801515247847733125,
        2225479898424516674,
        3405801118963612563,
        1415095316563273851,
        1847249199789191708,
        7649954976526474598,
        7770854650492431421,
        5505397589679894767,
        699863168351027397,
        2350854603691429285,
        7908047968288145105,
        8352425832288518353,
        4400134888944794752,
        6520458733199875118,
        459494196219413966,
        2685074739700608388,
        3813717749858696997,
        2852379985617170245,
        6570187720589570573,
        2211411520720391891,
        3899599197910438393,
        1582286473411789249,
        7810307374051011471,
        8273892317905702198,
        5829707091731756906,
        8589511875773959310,
        2037225785371025010,
        6695808902686629258,
        2899779761605154913,
        2943495617865334423,
        2044919953711266738,
        2687713125527562977,
        1354923012247420241,
        8098841996086351966,
        3688190060364945344,
        8739892236177320422,
        5286832443788918267,
        3232318583791222270,
        3564655150886546987,
        1430041349471906575,
        1356915949558732810,
        8467277798439327185,
        8483743287805547205,
        3773888057419244273,
        6803321901637660678,
        19444752648793607,
        2939295981831265925,
        7362246488296728318,
        4902618966093921228,
        2844263264656519334,
        3572954889694640449,
        7324212287374962127,
        8606077505997039808,
        7612025267406553371,
        237150343599318434,
        2249394492417416893,
        3166664666191090494,
        406838970515822255,
        1898752098293455102,
        5874668608103936528,
        6154261140377607033,
        3104039877479998052,
        8648978120146378054,
        3659038920267373606,
        5692491892694608755,
        4686251601549853557,
        2179343323560761209,
        2788338322206546199,
        3378316707571434912,
        392262610981897710,
        8385911088565035072,
        8591389061362627185,
        7148434606585059497,
        6235846545681265367,
        7461868005591746992,
        5130616632241858063,
        2028680134501150908,
        438771135047589049,
        7523751442063410605,
        5048346201712343731,
        6163186675891091559,
        1153696306003445686,
        2249414385226059275,
        9072881332819282290,
        639812413296443104,
        6855194185502422996,
        6477881401001478570,
        2016822154535446518,
        6228579808324990306,
        3452492096527425309,
        8816192752205185822,
        5915720470869899953,
        7267995918292218964,
        9216901714370915133,
        6174938900235582323,
        7399528940602323142,
        8067283106061788084,
        689901634706923966,
        3403734889957091002,
        3475926414246198157,
        1351704315098087135,
        3409339742082844834,
        1714627067698003951,
        8882616308481342819,
        8981075485654037389,
        4122732220353037990,
        2728811241870841570,
        7820075417804272261,
        7970114796588337864,
        2749306330643444737,
        8607937809412422,
        9042560685937533101,
        143223895900408298,
        5494306436436646227,
        4174386317734713449,
        7559802069558347998,
        759441433079310132,
        6940129557200722607,
        1580832237462881225,
        9121755658058211878,
        2084840029599708081,
        3282486932384088688,
        1438633415460386111,
        6899237661904916822,
        5727857029759928970,
        7871509143000216491,
        621968723033748951,
        6241926712891156122,
        7853507940034261267,
        734574511219299792,
        443059315001386998,
        4137525549701440244,
        8987456970247917143,
        8066717926158358997,
        3588603006249227714,
        5423197799235748702,
        539200898874793609,
        2512232729201797121,
        6922946760873952614,
        8296062866026521728,
        633205492787897739,
        8392913615014330985,
        4499334555563066290,
        473540877700771468,
        5285214767097775784,
        164142765578155626,
        6051791476480567790,
        2259646061796668055,
        2325151380291453067,
        3746890772857768643,
        2822199496222054622,
        7318790662708284409,
        2099027275996410089,
        3508794536146117736,
        2016605017757956177,
        5828188708304762308,
        8325763251011132126,
        3435239766130670289,
        6101338124253117635,
        5161982749825288098,
        4362560124698977937,
        9090682104077850223,
        1372329611842198773,
        6639052366466886907,
        1753824477111234699,
        5952273703979672651,
        6671325618153653554,
        8755928181593528194,
        8897193515001642107,
        2656486150849867410,
        7944503815991233540,
        6524024833306945642,
        9183866744924227174,
        130372104415231116,
        7177154962008707056,
        3456054432801704327,
        5630590910122487290,
        2743153165281518501,
        5979108585375922629,
        4405027249150098759,
        7938494145439495975,
        3618585044190150185,
        1999877334393239664,
        1047708076302862853,
        1614239616672212573,
        8853656486221049544,
        8395330672504007179,
        6812086042248250917,
        9108104200675519911,
        2493979150133518886,
        8013226797324899029,
        3702325525227703568,
        3847913522364585292,
        1384787049970137027,
        4399571303823743012,
        58903509103500262,
        5597260614483222915,
        9140308478971006509,
        7320531943348508169,
        8209828940354797388,
        7314008145230004031,
        1384611994281291966,
        1131624931295256176,
        7545413979078774194,
        2291661141300923695,
        2419464682080760847,
        6290705259185504023,
        1574338224319550687,
        3146862166309081842,
        3959221128487783948,
        8327562087796932737,
        8311821151923800052,
        2162588654290179846,
        9120360617098614714,
        8175506260800690164,
        1629138227601864338,
        3030501079695674721,
        7472638587980563205,
        8414589768240169581,
        8885416856685155434,
        8036328873746816342,
        8176290949278981940,
        2953742968786170798,
        4535282600813447593,
        1615463161634441644,
        5594566637414151026,
        2099450193580148103,
        84249236102165216,
        8001471012433612350,
        9172298155122529491,
        41845454037208225,
        4314011827176067510,
        561059605981752271,
        2492340329675437855,
        8777486557899970350,
        269017718122273037,
        3301870542098382372,
        3036183745290217451,
        8151815759241758472,
        8060557377120300020,
        5656616589418219150,
        1317518254346203629,
        1762205881541880644,
        874652329641763868,
        7811304686810842807,
        8577152736759332686,
        379514907682064106,
        962279002678131142,
        2635581039067582434,
        8585539283016018259,
        4453572026011528588,
        769480280417967138,
        8241390027662058716,
        8831865134001231809,
        4366827260158841734,
        715728503018425294,
        7064291300252248252,
        2225226539771083672,
        6133859733044332540,
        8932174031785446642,
        9122619162300007543,
        720007507906714044,
        5053047566368863611,
        7115806576092254573,
        393360818016159356,
        474264797233057089,
        3019793955076622132,
        2865081334527696691,
        3585817854901180712,
        6816911623945603524,
        2622702189695134319,
        738827331173707581,
        3689435734016935884,
        5352311377976667166,
        7652617261692283483,
        4597217521178161071,
        190629341104866461,
        3029208679029084049,
        1994456040465984525,
        1642398105788300096,
        6596099135715597570,
        1870679960917748335,
        472741667402047784,
        8508696798102400446,
        251371643102140460,
        2938032336750196780,
        6352478481099351606,
        7473147047598627394,
        9150909545264128235,
        6788677312820454396,
        7902367091547443915,
        6156332927596122814,
        6319806637083549128,
        7442866940337625838,
        2227071491150425204,
        5065703079577799848,
        5771699047160977949,
        5313747748351641389,
        3853679392969826869,
        2565461764493267736,
        8823076716079772889,
        3425954261967379427,
        757115653678008229,
        1740545826112459780,
        731615765620021459,
        7955731353673957890,
        1123079733634614554,
        815169670401201224,
        8324550707611292227,
        3460433347477270932,
        2443136898171810946,
        9122187376204749239,
        5922378953111682933,
        6889851152382912693,
        1257063976417241475,
        6441840090107351576,
        619203549248598002,
        5041920040199715700,
        4573653470492482829,
        7270470185246463268,
        821276840375841267,
        1056825300575735440,
        902107465812556211,
        457884912055624237,
        7282041121636233950,
        1093451416090964878,
        4419353457414857258,
        5674540502778838495,
        4318148645348320327,
        3833560640438056572,
        7266278878324612877,
        6649254534641703330,
        2211128980953804294,
        5182713543897620469
      ],
      retiredRelationUids: const [
        1226469011453769556,
        4334679211015697719,
        658993855133497141,
        7628231779967948088,
        7335578884425240534,
        8472678273863104956,
        7210017988446897791,
        1844994221846500557,
        9210369731160851167,
        844143373802489165,
        803629559452567645,
        3709026006801487301,
        5617872246173150113,
        795186633578779297,
        1265602403063460460,
        68666458468522626,
        6096914602419360853,
        5565418848143813218,
        3150796807169985253,
        4209805199751898594,
        7559880855013026980,
        2166414226903887086,
        134544593655180451,
        8898484037009311682,
        1285445577259759221,
        7439886465704814216,
        1737877595911700080,
        2038229905033466972,
        5306897733520592510,
        7743390360918718064,
        5207316558226170877,
        2084439730118676088,
        5641546153511965211,
        9163628031946481713,
        6994368768961604055,
        7171015875642997631,
        6929442407370177314,
        8650399258645622385,
        4454853059839861178,
        1176537328766838454,
        4439914579551300934,
        7907540417784017008,
        3803692598585200085
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Bitacora: EntityDefinition<Bitacora>(
        model: _entities[0],
        toOneRelations: (Bitacora object) => [
              object.controlForm,
              object.measures,
              object.lights,
              object.carBodywork,
              object.fluidsCheck,
              object.security,
              object.extra,
              object.equipment,
              object.bucketInspection,
              object.status,
              object.company,
              object.vehicle,
              object.user,
              object.service,
              object.vehicleService,
              object.rule,
              object.image
            ],
        toManyRelations: (Bitacora object) =>
            {RelInfo<Users>.toManyBacklink(95, object.id): object.users},
        getId: (Bitacora object) => object.id,
        setId: (Bitacora object, int id) {
          object.id = id;
        },
        objectToFB: (Bitacora object, fb.Builder fbb) {
          final instruccionAdicionalOffset = object.instruccionAdicional == null
              ? null
              : fbb.writeString(object.instruccionAdicional!);
          final instruccionOffset = fbb.writeString(object.instruccion);
          final usuarioPropietarioOffset =
              fbb.writeString(object.usuarioPropietario);
          fbb.startTable(61);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(12, instruccionAdicionalOffset);
          fbb.addOffset(14, instruccionOffset);
          fbb.addOffset(34, usuarioPropietarioOffset);
          fbb.addBool(37, object.executeSupabase);
          fbb.addInt64(40, object.idControlForm);
          fbb.addInt64(41, object.controlForm.targetId);
          fbb.addInt64(42, object.measures.targetId);
          fbb.addInt64(43, object.lights.targetId);
          fbb.addInt64(44, object.carBodywork.targetId);
          fbb.addInt64(45, object.fluidsCheck.targetId);
          fbb.addInt64(47, object.security.targetId);
          fbb.addInt64(48, object.extra.targetId);
          fbb.addInt64(49, object.equipment.targetId);
          fbb.addInt64(50, object.bucketInspection.targetId);
          fbb.addInt64(51, object.status.targetId);
          fbb.addInt64(52, object.company.targetId);
          fbb.addInt64(53, object.vehicle.targetId);
          fbb.addInt64(54, object.user.targetId);
          fbb.addInt64(55, object.service.targetId);
          fbb.addInt64(56, object.vehicleService.targetId);
          fbb.addInt64(57, object.rule.targetId);
          fbb.addInt64(59, object.image.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Bitacora(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              usuarioPropietario: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 72, ''),
              instruccion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, ''),
              instruccionAdicional:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 28),
              idControlForm:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 84, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              executeSupabase: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 78, false));
          object.controlForm.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 86, 0);
          object.controlForm.attach(store);
          object.measures.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 88, 0);
          object.measures.attach(store);
          object.lights.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 90, 0);
          object.lights.attach(store);
          object.carBodywork.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 92, 0);
          object.carBodywork.attach(store);
          object.fluidsCheck.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 94, 0);
          object.fluidsCheck.attach(store);
          object.security.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 98, 0);
          object.security.attach(store);
          object.extra.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 100, 0);
          object.extra.attach(store);
          object.equipment.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 102, 0);
          object.equipment.attach(store);
          object.bucketInspection.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 104, 0);
          object.bucketInspection.attach(store);
          object.status.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 106, 0);
          object.status.attach(store);
          object.company.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 108, 0);
          object.company.attach(store);
          object.vehicle.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 110, 0);
          object.vehicle.attach(store);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 112, 0);
          object.user.attach(store);
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 114, 0);
          object.service.attach(store);
          object.vehicleService.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 116, 0);
          object.vehicleService.attach(store);
          object.rule.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 118, 0);
          object.rule.attach(store);
          object.image.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 122, 0);
          object.image.attach(store);
          InternalToManyAccess.setRelInfo<Bitacora>(object.users, store,
              RelInfo<Users>.toManyBacklink(95, object.id));
          return object;
        }),
    ControlForm: EntityDefinition<ControlForm>(
        model: _entities[1],
        toOneRelations: (ControlForm object) => [
              object.employee,
              object.vehicle,
              object.measuresR,
              object.lightsR,
              object.carBodyworkR,
              object.fluidsCheckR,
              object.bucketInspectionR,
              object.securityR,
              object.extraR,
              object.equipmentR,
              object.measuresD,
              object.lightsD,
              object.carBodyworkD,
              object.fluidsCheckD,
              object.bucketInspectionD,
              object.securityD,
              object.extraD,
              object.equipmentD
            ],
        toManyRelations: (ControlForm object) => {
              RelInfo<Bitacora>.toOneBacklink(42, object.id,
                      (Bitacora srcObject) => srcObject.controlForm):
                  object.bitacora
            },
        getId: (ControlForm object) => object.id,
        setId: (ControlForm object, int id) {
          object.id = id;
        },
        objectToFB: (ControlForm object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(39);
          fbb.addInt64(0, object.id);
          fbb.addOffset(3, idDBROffset);
          fbb.addInt64(4, object.employee.targetId);
          fbb.addInt64(5, object.vehicle.targetId);
          fbb.addInt64(17, object.dateAddedR.millisecondsSinceEpoch);
          fbb.addInt64(18, object.dateAddedD?.millisecondsSinceEpoch);
          fbb.addInt64(19, object.issuesR);
          fbb.addInt64(20, object.issuesD);
          fbb.addInt64(21, object.measuresR.targetId);
          fbb.addInt64(22, object.lightsR.targetId);
          fbb.addInt64(23, object.carBodyworkR.targetId);
          fbb.addInt64(24, object.fluidsCheckR.targetId);
          fbb.addInt64(25, object.bucketInspectionR.targetId);
          fbb.addInt64(26, object.securityR.targetId);
          fbb.addInt64(27, object.extraR.targetId);
          fbb.addInt64(28, object.equipmentR.targetId);
          fbb.addInt64(29, object.measuresD.targetId);
          fbb.addInt64(30, object.lightsD.targetId);
          fbb.addInt64(31, object.carBodyworkD.targetId);
          fbb.addInt64(32, object.fluidsCheckD.targetId);
          fbb.addInt64(33, object.bucketInspectionD.targetId);
          fbb.addInt64(34, object.securityD.targetId);
          fbb.addInt64(35, object.extraD.targetId);
          fbb.addInt64(36, object.equipmentD.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateAddedDValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 40);
          final object = ControlForm(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              issuesR:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0),
              issuesD: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 44),
              dateAddedR: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0)),
              dateAddedD: dateAddedDValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(dateAddedDValue),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          object.employee.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.employee.attach(store);
          object.vehicle.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.vehicle.attach(store);
          object.measuresR.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0);
          object.measuresR.attach(store);
          object.lightsR.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0);
          object.lightsR.attach(store);
          object.carBodyworkR.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
          object.carBodyworkR.attach(store);
          object.fluidsCheckR.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          object.fluidsCheckR.attach(store);
          object.bucketInspectionR.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 54, 0);
          object.bucketInspectionR.attach(store);
          object.securityR.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0);
          object.securityR.attach(store);
          object.extraR.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 58, 0);
          object.extraR.attach(store);
          object.equipmentR.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 60, 0);
          object.equipmentR.attach(store);
          object.measuresD.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 62, 0);
          object.measuresD.attach(store);
          object.lightsD.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 64, 0);
          object.lightsD.attach(store);
          object.carBodyworkD.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 66, 0);
          object.carBodyworkD.attach(store);
          object.fluidsCheckD.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 68, 0);
          object.fluidsCheckD.attach(store);
          object.bucketInspectionD.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 70, 0);
          object.bucketInspectionD.attach(store);
          object.securityD.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 72, 0);
          object.securityD.attach(store);
          object.extraD.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 74, 0);
          object.extraD.attach(store);
          object.equipmentD.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 76, 0);
          object.equipmentD.attach(store);
          InternalToManyAccess.setRelInfo<ControlForm>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(42, object.id,
                  (Bitacora srcObject) => srcObject.controlForm));
          return object;
        }),
    CarBodywork: EntityDefinition<CarBodywork>(
        model: _entities[2],
        toOneRelations: (CarBodywork object) => [object.controlForm],
        toManyRelations: (CarBodywork object) => {
              RelInfo<Bitacora>.toOneBacklink(45, object.id,
                      (Bitacora srcObject) => srcObject.carBodywork):
                  object.bitacora
            },
        getId: (CarBodywork object) => object.id,
        setId: (CarBodywork object, int id) {
          object.id = id;
        },
        objectToFB: (CarBodywork object, fb.Builder fbb) {
          final wiperBladesFrontOffset =
              fbb.writeString(object.wiperBladesFront);
          final wiperBladesFrontCommentsOffset =
              fbb.writeString(object.wiperBladesFrontComments);
          final wiperBladesBackOffset = fbb.writeString(object.wiperBladesBack);
          final wiperBladesBackCommentsOffset =
              fbb.writeString(object.wiperBladesBackComments);
          final windshieldWiperFrontOffset =
              fbb.writeString(object.windshieldWiperFront);
          final windshieldWiperFrontCommentsOffset =
              fbb.writeString(object.windshieldWiperFrontComments);
          final windshieldWiperBackOffset =
              fbb.writeString(object.windshieldWiperBack);
          final windshieldWiperBackCommentsOffset =
              fbb.writeString(object.windshieldWiperBackComments);
          final generalBodyOffset = fbb.writeString(object.generalBody);
          final generalBodyCommentsOffset =
              fbb.writeString(object.generalBodyComments);
          final decalingOffset = fbb.writeString(object.decaling);
          final decalingCommentsOffset =
              fbb.writeString(object.decalingComments);
          final tiresOffset = fbb.writeString(object.tires);
          final tiresCommentsOffset = fbb.writeString(object.tiresComments);
          final glassOffset = fbb.writeString(object.glass);
          final glassCommentsOffset = fbb.writeString(object.glassComments);
          final mirrorsOffset = fbb.writeString(object.mirrors);
          final mirrorsCommentsOffset = fbb.writeString(object.mirrorsComments);
          final parkingOffset = fbb.writeString(object.parking);
          final parkingCommentsOffset = fbb.writeString(object.parkingComments);
          final brakesOffset = fbb.writeString(object.brakes);
          final brakesCommentsOffset = fbb.writeString(object.brakesComments);
          final emgBrakesOffset = fbb.writeString(object.emgBrakes);
          final emgBrakesCommentsOffset =
              fbb.writeString(object.emgBrakesComments);
          final hornOffset = fbb.writeString(object.horn);
          final hornCommentsOffset = fbb.writeString(object.hornComments);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final wiperBladesFrontImagesOffset = fbb.writeList(object
              .wiperBladesFrontImages
              .map(fbb.writeString)
              .toList(growable: false));
          final wiperBladesFrontPathOffset = fbb.writeList(object
              .wiperBladesFrontPath
              .map(fbb.writeString)
              .toList(growable: false));
          final wiperBladesBackImagesOffset = fbb.writeList(object
              .wiperBladesBackImages
              .map(fbb.writeString)
              .toList(growable: false));
          final wiperBladesBackPathOffset = fbb.writeList(object
              .wiperBladesBackPath
              .map(fbb.writeString)
              .toList(growable: false));
          final windshieldWiperFrontImagesOffset = fbb.writeList(object
              .windshieldWiperFrontImages
              .map(fbb.writeString)
              .toList(growable: false));
          final windshieldWiperFrontPathOffset = fbb.writeList(object
              .windshieldWiperFrontPath
              .map(fbb.writeString)
              .toList(growable: false));
          final windshieldWiperBackImagesOffset = fbb.writeList(object
              .windshieldWiperBackImages
              .map(fbb.writeString)
              .toList(growable: false));
          final windshieldWiperBackPathOffset = fbb.writeList(object
              .windshieldWiperBackPath
              .map(fbb.writeString)
              .toList(growable: false));
          final generalBodyImagesOffset = fbb.writeList(object.generalBodyImages
              .map(fbb.writeString)
              .toList(growable: false));
          final generalBodyPathOffset = fbb.writeList(object.generalBodyPath
              .map(fbb.writeString)
              .toList(growable: false));
          final decalingImagesOffset = fbb.writeList(object.decalingImages
              .map(fbb.writeString)
              .toList(growable: false));
          final decalingPathOffset = fbb.writeList(
              object.decalingPath.map(fbb.writeString).toList(growable: false));
          final tiresImagesOffset = fbb.writeList(
              object.tiresImages.map(fbb.writeString).toList(growable: false));
          final tiresPathOffset = fbb.writeList(
              object.tiresPath.map(fbb.writeString).toList(growable: false));
          final glassImagesOffset = fbb.writeList(
              object.glassImages.map(fbb.writeString).toList(growable: false));
          final glassPathOffset = fbb.writeList(
              object.glassPath.map(fbb.writeString).toList(growable: false));
          final mirrorsImagesOffset = fbb.writeList(object.mirrorsImages
              .map(fbb.writeString)
              .toList(growable: false));
          final mirrorsPathOffset = fbb.writeList(
              object.mirrorsPath.map(fbb.writeString).toList(growable: false));
          final parkingImagesOffset = fbb.writeList(object.parkingImages
              .map(fbb.writeString)
              .toList(growable: false));
          final parkingPathOffset = fbb.writeList(
              object.parkingPath.map(fbb.writeString).toList(growable: false));
          final brakesImagesOffset = fbb.writeList(
              object.brakesImages.map(fbb.writeString).toList(growable: false));
          final brakesPathOffset = fbb.writeList(
              object.brakesPath.map(fbb.writeString).toList(growable: false));
          final emgBrakesImagesOffset = fbb.writeList(object.emgBrakesImages
              .map(fbb.writeString)
              .toList(growable: false));
          final emgBrakesPathOffset = fbb.writeList(object.emgBrakesPath
              .map(fbb.writeString)
              .toList(growable: false));
          final hornImagesOffset = fbb.writeList(
              object.hornImages.map(fbb.writeString).toList(growable: false));
          final hornPathOffset = fbb.writeList(
              object.hornPath.map(fbb.writeString).toList(growable: false));
          final wiperBladesFrontNamesOffset = fbb.writeList(object
              .wiperBladesFrontNames
              .map(fbb.writeString)
              .toList(growable: false));
          final wiperBladesBackNamesOffset = fbb.writeList(object
              .wiperBladesBackNames
              .map(fbb.writeString)
              .toList(growable: false));
          final windshieldWiperFrontNamesOffset = fbb.writeList(object
              .windshieldWiperFrontNames
              .map(fbb.writeString)
              .toList(growable: false));
          final windshieldWiperBackNamesOffset = fbb.writeList(object
              .windshieldWiperBackNames
              .map(fbb.writeString)
              .toList(growable: false));
          final generalBodyNamesOffset = fbb.writeList(object.generalBodyNames
              .map(fbb.writeString)
              .toList(growable: false));
          final decalingNamesOffset = fbb.writeList(object.decalingNames
              .map(fbb.writeString)
              .toList(growable: false));
          final tiresNamesOffset = fbb.writeList(
              object.tiresNames.map(fbb.writeString).toList(growable: false));
          final glassNamesOffset = fbb.writeList(
              object.glassNames.map(fbb.writeString).toList(growable: false));
          final mirrorsNamesOffset = fbb.writeList(
              object.mirrorsNames.map(fbb.writeString).toList(growable: false));
          final parkingNamesOffset = fbb.writeList(
              object.parkingNames.map(fbb.writeString).toList(growable: false));
          final brakesNamesOffset = fbb.writeList(
              object.brakesNames.map(fbb.writeString).toList(growable: false));
          final emgBrakesNamesOffset = fbb.writeList(object.emgBrakesNames
              .map(fbb.writeString)
              .toList(growable: false));
          final hornNamesOffset = fbb.writeList(
              object.hornNames.map(fbb.writeString).toList(growable: false));
          fbb.startTable(70);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, wiperBladesFrontOffset);
          fbb.addOffset(2, wiperBladesFrontCommentsOffset);
          fbb.addOffset(3, wiperBladesBackOffset);
          fbb.addOffset(4, wiperBladesBackCommentsOffset);
          fbb.addOffset(5, windshieldWiperFrontOffset);
          fbb.addOffset(6, windshieldWiperFrontCommentsOffset);
          fbb.addOffset(7, windshieldWiperBackOffset);
          fbb.addOffset(8, windshieldWiperBackCommentsOffset);
          fbb.addOffset(9, generalBodyOffset);
          fbb.addOffset(10, generalBodyCommentsOffset);
          fbb.addOffset(11, decalingOffset);
          fbb.addOffset(12, decalingCommentsOffset);
          fbb.addOffset(13, tiresOffset);
          fbb.addOffset(14, tiresCommentsOffset);
          fbb.addOffset(15, glassOffset);
          fbb.addOffset(16, glassCommentsOffset);
          fbb.addOffset(17, mirrorsOffset);
          fbb.addOffset(18, mirrorsCommentsOffset);
          fbb.addOffset(19, parkingOffset);
          fbb.addOffset(20, parkingCommentsOffset);
          fbb.addOffset(21, brakesOffset);
          fbb.addOffset(22, brakesCommentsOffset);
          fbb.addOffset(23, emgBrakesOffset);
          fbb.addOffset(24, emgBrakesCommentsOffset);
          fbb.addOffset(25, hornOffset);
          fbb.addOffset(26, hornCommentsOffset);
          fbb.addInt64(27, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(28, idDBROffset);
          fbb.addInt64(29, object.controlForm.targetId);
          fbb.addOffset(30, wiperBladesFrontImagesOffset);
          fbb.addOffset(31, wiperBladesFrontPathOffset);
          fbb.addOffset(32, wiperBladesBackImagesOffset);
          fbb.addOffset(33, wiperBladesBackPathOffset);
          fbb.addOffset(34, windshieldWiperFrontImagesOffset);
          fbb.addOffset(35, windshieldWiperFrontPathOffset);
          fbb.addOffset(36, windshieldWiperBackImagesOffset);
          fbb.addOffset(37, windshieldWiperBackPathOffset);
          fbb.addOffset(38, generalBodyImagesOffset);
          fbb.addOffset(39, generalBodyPathOffset);
          fbb.addOffset(40, decalingImagesOffset);
          fbb.addOffset(41, decalingPathOffset);
          fbb.addOffset(42, tiresImagesOffset);
          fbb.addOffset(43, tiresPathOffset);
          fbb.addOffset(44, glassImagesOffset);
          fbb.addOffset(45, glassPathOffset);
          fbb.addOffset(46, mirrorsImagesOffset);
          fbb.addOffset(47, mirrorsPathOffset);
          fbb.addOffset(48, parkingImagesOffset);
          fbb.addOffset(49, parkingPathOffset);
          fbb.addOffset(50, brakesImagesOffset);
          fbb.addOffset(51, brakesPathOffset);
          fbb.addOffset(52, emgBrakesImagesOffset);
          fbb.addOffset(53, emgBrakesPathOffset);
          fbb.addOffset(54, hornImagesOffset);
          fbb.addOffset(55, hornPathOffset);
          fbb.addOffset(56, wiperBladesFrontNamesOffset);
          fbb.addOffset(57, wiperBladesBackNamesOffset);
          fbb.addOffset(58, windshieldWiperFrontNamesOffset);
          fbb.addOffset(59, windshieldWiperBackNamesOffset);
          fbb.addOffset(60, generalBodyNamesOffset);
          fbb.addOffset(61, decalingNamesOffset);
          fbb.addOffset(62, tiresNamesOffset);
          fbb.addOffset(63, glassNamesOffset);
          fbb.addOffset(64, mirrorsNamesOffset);
          fbb.addOffset(65, parkingNamesOffset);
          fbb.addOffset(66, brakesNamesOffset);
          fbb.addOffset(67, emgBrakesNamesOffset);
          fbb.addOffset(68, hornNamesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CarBodywork(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              wiperBladesFront: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              wiperBladesFrontComments: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              wiperBladesFrontImages:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 64, []),
              wiperBladesFrontPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 66, []),
              wiperBladesFrontNames:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 116, []),
              wiperBladesBack: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              wiperBladesBackComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 12, ''),
              wiperBladesBackImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 68, []),
              wiperBladesBackPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 70, []),
              wiperBladesBackNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 118, []),
              windshieldWiperFront: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 14, ''),
              windshieldWiperFrontComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 16, ''),
              windshieldWiperFrontImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 72, []),
              windshieldWiperFrontPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 74, []),
              windshieldWiperFrontNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 120, []),
              windshieldWiperBack: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              windshieldWiperBackComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              windshieldWiperBackImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 76, []),
              windshieldWiperBackPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 78, []),
              windshieldWiperBackNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 122, []),
              generalBody: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              generalBodyComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              generalBodyImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 80, []),
              generalBodyPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 82, []),
              generalBodyNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 124, []),
              decaling: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              decalingComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''),
              decalingImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 84, []),
              decalingPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 86, []),
              decalingNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 126, []),
              tires: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              tiresComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 32, ''),
              tiresImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 88, []),
              tiresPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 90, []),
              tiresNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 128, []),
              glass: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 34, ''),
              glassComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 36, ''),
              glassImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 92, []),
              glassPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 94, []),
              glassNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 130, []),
              mirrors: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 38, ''),
              mirrorsComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 40, ''),
              mirrorsImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 96, []),
              mirrorsPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 98, []),
              mirrorsNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 132, []),
              parking: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 42, ''),
              parkingComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 44, ''),
              parkingImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 100, []),
              parkingPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 102, []),
              parkingNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 134, []),
              brakes: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 46, ''),
              brakesComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 48, ''),
              brakesImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 104, []),
              brakesPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 106, []),
              brakesNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 136, []),
              emgBrakes: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 50, ''),
              emgBrakesComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 52, ''),
              emgBrakesImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 108, []),
              emgBrakesPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 110, []),
              emgBrakesNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 138, []),
              horn: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 54, ''),
              hornComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 56, ''),
              hornImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 112, []),
              hornPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 114, []),
              hornNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 140, []),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 58, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 60));
          object.controlForm.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 62, 0);
          object.controlForm.attach(store);
          InternalToManyAccess.setRelInfo<CarBodywork>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(45, object.id,
                  (Bitacora srcObject) => srcObject.carBodywork));
          return object;
        }),
    Equipment: EntityDefinition<Equipment>(
        model: _entities[3],
        toOneRelations: (Equipment object) => [object.controlForm],
        toManyRelations: (Equipment object) => {
              RelInfo<Bitacora>.toOneBacklink(50, object.id,
                  (Bitacora srcObject) => srcObject.equipment): object.bitacora
            },
        getId: (Equipment object) => object.id,
        setId: (Equipment object, int id) {
          object.id = id;
        },
        objectToFB: (Equipment object, fb.Builder fbb) {
          final ignitionKeyOffset = fbb.writeString(object.ignitionKey);
          final ignitionKeyCommentsOffset =
              fbb.writeString(object.ignitionKeyComments);
          final binsBoxKeyOffset = fbb.writeString(object.binsBoxKey);
          final binsBoxKeyCommentsOffset =
              fbb.writeString(object.binsBoxKeyComments);
          final vehicleRegistrationCopyOffset =
              fbb.writeString(object.vehicleRegistrationCopy);
          final vehicleRegistrationCopyCommentsOffset =
              fbb.writeString(object.vehicleRegistrationCopyComments);
          final vehicleInsuranceCopyOffset =
              fbb.writeString(object.vehicleInsuranceCopy);
          final vehicleInsuranceCopyCommentsOffset =
              fbb.writeString(object.vehicleInsuranceCopyComments);
          final bucketLiftOperatorManualOffset =
              fbb.writeString(object.bucketLiftOperatorManual);
          final bucketLiftOperatorManualCommentsOffset =
              fbb.writeString(object.bucketLiftOperatorManualComments);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final ignitionKeyImagesOffset = fbb.writeList(object.ignitionKeyImages
              .map(fbb.writeString)
              .toList(growable: false));
          final ignitionKeyPathOffset = fbb.writeList(object.ignitionKeyPath
              .map(fbb.writeString)
              .toList(growable: false));
          final binsBoxKeyImagesOffset = fbb.writeList(object.binsBoxKeyImages
              .map(fbb.writeString)
              .toList(growable: false));
          final binsBoxKeyPathOffset = fbb.writeList(object.binsBoxKeyPath
              .map(fbb.writeString)
              .toList(growable: false));
          final vehicleRegistrationCopyImagesOffset = fbb.writeList(object
              .vehicleRegistrationCopyImages
              .map(fbb.writeString)
              .toList(growable: false));
          final vehicleRegistrationCopyPathOffset = fbb.writeList(object
              .vehicleRegistrationCopyPath
              .map(fbb.writeString)
              .toList(growable: false));
          final vehicleInsuranceCopyImagesOffset = fbb.writeList(object
              .vehicleInsuranceCopyImages
              .map(fbb.writeString)
              .toList(growable: false));
          final vehicleInsuranceCopyPathOffset = fbb.writeList(object
              .vehicleInsuranceCopyPath
              .map(fbb.writeString)
              .toList(growable: false));
          final bucketLiftOperatorManualImagesOffset = fbb.writeList(object
              .bucketLiftOperatorManualImages
              .map(fbb.writeString)
              .toList(growable: false));
          final bucketLiftOperatorManualPathOffset = fbb.writeList(object
              .bucketLiftOperatorManualPath
              .map(fbb.writeString)
              .toList(growable: false));
          final ignitionKeyNamesOffset = fbb.writeList(object.ignitionKeyNames
              .map(fbb.writeString)
              .toList(growable: false));
          final binsBoxKeyNamesOffset = fbb.writeList(object.binsBoxKeyNames
              .map(fbb.writeString)
              .toList(growable: false));
          final vehicleRegistrationCopyNamesOffset = fbb.writeList(object
              .vehicleRegistrationCopyNames
              .map(fbb.writeString)
              .toList(growable: false));
          final vehicleInsuranceCopyNamesOffset = fbb.writeList(object
              .vehicleInsuranceCopyNames
              .map(fbb.writeString)
              .toList(growable: false));
          final bucketLiftOperatorManualNamesOffset = fbb.writeList(object
              .bucketLiftOperatorManualNames
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(30);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, ignitionKeyOffset);
          fbb.addOffset(2, ignitionKeyCommentsOffset);
          fbb.addOffset(3, binsBoxKeyOffset);
          fbb.addOffset(4, binsBoxKeyCommentsOffset);
          fbb.addOffset(5, vehicleRegistrationCopyOffset);
          fbb.addOffset(6, vehicleRegistrationCopyCommentsOffset);
          fbb.addOffset(7, vehicleInsuranceCopyOffset);
          fbb.addOffset(8, vehicleInsuranceCopyCommentsOffset);
          fbb.addOffset(9, bucketLiftOperatorManualOffset);
          fbb.addOffset(10, bucketLiftOperatorManualCommentsOffset);
          fbb.addInt64(11, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(12, idDBROffset);
          fbb.addInt64(13, object.controlForm.targetId);
          fbb.addOffset(14, ignitionKeyImagesOffset);
          fbb.addOffset(15, ignitionKeyPathOffset);
          fbb.addOffset(16, binsBoxKeyImagesOffset);
          fbb.addOffset(17, binsBoxKeyPathOffset);
          fbb.addOffset(18, vehicleRegistrationCopyImagesOffset);
          fbb.addOffset(19, vehicleRegistrationCopyPathOffset);
          fbb.addOffset(20, vehicleInsuranceCopyImagesOffset);
          fbb.addOffset(21, vehicleInsuranceCopyPathOffset);
          fbb.addOffset(22, bucketLiftOperatorManualImagesOffset);
          fbb.addOffset(23, bucketLiftOperatorManualPathOffset);
          fbb.addOffset(24, ignitionKeyNamesOffset);
          fbb.addOffset(25, binsBoxKeyNamesOffset);
          fbb.addOffset(26, vehicleRegistrationCopyNamesOffset);
          fbb.addOffset(27, vehicleInsuranceCopyNamesOffset);
          fbb.addOffset(28, bucketLiftOperatorManualNamesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Equipment(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              ignitionKey: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              ignitionKeyComments: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              ignitionKeyImages:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 32, []),
              ignitionKeyPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 34, []),
              ignitionKeyNames:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 52, []),
              binsBoxKey: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              binsBoxKeyComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 12, ''),
              binsBoxKeyImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 36, []),
              binsBoxKeyPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 38, []),
              binsBoxKeyNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 54, []),
              vehicleRegistrationCopy: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 14, ''),
              vehicleRegistrationCopyComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 16, ''),
              vehicleRegistrationCopyImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 40, []),
              vehicleRegistrationCopyPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 42, []),
              vehicleRegistrationCopyNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 56, []),
              vehicleInsuranceCopy: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              vehicleInsuranceCopyComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              vehicleInsuranceCopyImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 44, []),
              vehicleInsuranceCopyPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 46, []),
              vehicleInsuranceCopyNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 58, []),
              bucketLiftOperatorManual: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              bucketLiftOperatorManualComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              bucketLiftOperatorManualImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 48, []),
              bucketLiftOperatorManualPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 50, []),
              bucketLiftOperatorManualNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 60, []),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28));
          object.controlForm.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.controlForm.attach(store);
          InternalToManyAccess.setRelInfo<Equipment>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  50, object.id, (Bitacora srcObject) => srcObject.equipment));
          return object;
        }),
    Extra: EntityDefinition<Extra>(
        model: _entities[4],
        toOneRelations: (Extra object) => [object.controlForm],
        toManyRelations: (Extra object) => {
              RelInfo<Bitacora>.toOneBacklink(
                      49, object.id, (Bitacora srcObject) => srcObject.extra):
                  object.bitacora
            },
        getId: (Extra object) => object.id,
        setId: (Extra object, int id) {
          object.id = id;
        },
        objectToFB: (Extra object, fb.Builder fbb) {
          final ladderOffset = fbb.writeString(object.ladder);
          final ladderCommentsOffset = fbb.writeString(object.ladderComments);
          final stepLadderOffset = fbb.writeString(object.stepLadder);
          final stepLadderCommentsOffset =
              fbb.writeString(object.stepLadderComments);
          final hydraulicFluidForBucketOffset =
              fbb.writeString(object.hydraulicFluidForBucket);
          final hydraulicFluidForBucketCommentsOffset =
              fbb.writeString(object.hydraulicFluidForBucketComments);
          final fiberReelRackOffset = fbb.writeString(object.fiberReelRack);
          final fiberReelRackCommentsOffset =
              fbb.writeString(object.fiberReelRackComments);
          final binsLockedAndSecureOffset =
              fbb.writeString(object.binsLockedAndSecure);
          final binsLockedAndSecureCommentsOffset =
              fbb.writeString(object.binsLockedAndSecureComments);
          final safetyHarnessOffset = fbb.writeString(object.safetyHarness);
          final safetyHarnessCommentsOffset =
              fbb.writeString(object.safetyHarnessComments);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final ladderStrapsOffset = fbb.writeString(object.ladderStraps);
          final ladderStrapsCommentsOffset =
              fbb.writeString(object.ladderStrapsComments);
          final lanyardSafetyHarnessOffset =
              fbb.writeString(object.lanyardSafetyHarness);
          final lanyardSafetyHarnessCommentsOffset =
              fbb.writeString(object.lanyardSafetyHarnessComments);
          final ladderImagesOffset = fbb.writeList(
              object.ladderImages.map(fbb.writeString).toList(growable: false));
          final ladderPathOffset = fbb.writeList(
              object.ladderPath.map(fbb.writeString).toList(growable: false));
          final stepLadderImagesOffset = fbb.writeList(object.stepLadderImages
              .map(fbb.writeString)
              .toList(growable: false));
          final stepLadderPathOffset = fbb.writeList(object.stepLadderPath
              .map(fbb.writeString)
              .toList(growable: false));
          final ladderStrapsImagesOffset = fbb.writeList(object
              .ladderStrapsImages
              .map(fbb.writeString)
              .toList(growable: false));
          final ladderStrapsPathOffset = fbb.writeList(object.ladderStrapsPath
              .map(fbb.writeString)
              .toList(growable: false));
          final hydraulicFluidForBucketImagesOffset = fbb.writeList(object
              .hydraulicFluidForBucketImages
              .map(fbb.writeString)
              .toList(growable: false));
          final hydraulicFluidForBucketPathOffset = fbb.writeList(object
              .hydraulicFluidForBucketPath
              .map(fbb.writeString)
              .toList(growable: false));
          final fiberReelRackImagesOffset = fbb.writeList(object
              .fiberReelRackImages
              .map(fbb.writeString)
              .toList(growable: false));
          final fiberReelRackPathOffset = fbb.writeList(object.fiberReelRackPath
              .map(fbb.writeString)
              .toList(growable: false));
          final binsLockedAndSecureImagesOffset = fbb.writeList(object
              .binsLockedAndSecureImages
              .map(fbb.writeString)
              .toList(growable: false));
          final binsLockedAndSecurePathOffset = fbb.writeList(object
              .binsLockedAndSecurePath
              .map(fbb.writeString)
              .toList(growable: false));
          final safetyHarnessImagesOffset = fbb.writeList(object
              .safetyHarnessImages
              .map(fbb.writeString)
              .toList(growable: false));
          final safetyHarnessPathOffset = fbb.writeList(object.safetyHarnessPath
              .map(fbb.writeString)
              .toList(growable: false));
          final lanyardSafetyHarnessImagesOffset = fbb.writeList(object
              .lanyardSafetyHarnessImages
              .map(fbb.writeString)
              .toList(growable: false));
          final lanyardSafetyHarnessPathOffset = fbb.writeList(object
              .lanyardSafetyHarnessPath
              .map(fbb.writeString)
              .toList(growable: false));
          final ladderNamesOffset = fbb.writeList(
              object.ladderNames.map(fbb.writeString).toList(growable: false));
          final stepLadderNamesOffset = fbb.writeList(object.stepLadderNames
              .map(fbb.writeString)
              .toList(growable: false));
          final ladderStrapsNamesOffset = fbb.writeList(object.ladderStrapsNames
              .map(fbb.writeString)
              .toList(growable: false));
          final hydraulicFluidForBucketNamesOffset = fbb.writeList(object
              .hydraulicFluidForBucketNames
              .map(fbb.writeString)
              .toList(growable: false));
          final fiberReelRackNamesOffset = fbb.writeList(object
              .fiberReelRackNames
              .map(fbb.writeString)
              .toList(growable: false));
          final binsLockedAndSecureNamesOffset = fbb.writeList(object
              .binsLockedAndSecureNames
              .map(fbb.writeString)
              .toList(growable: false));
          final safetyHarnessNamesOffset = fbb.writeList(object
              .safetyHarnessNames
              .map(fbb.writeString)
              .toList(growable: false));
          final lanyardSafetyHarnessNamesOffset = fbb.writeList(object
              .lanyardSafetyHarnessNames
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(49);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, ladderOffset);
          fbb.addOffset(2, ladderCommentsOffset);
          fbb.addOffset(3, stepLadderOffset);
          fbb.addOffset(4, stepLadderCommentsOffset);
          fbb.addOffset(7, hydraulicFluidForBucketOffset);
          fbb.addOffset(8, hydraulicFluidForBucketCommentsOffset);
          fbb.addOffset(9, fiberReelRackOffset);
          fbb.addOffset(10, fiberReelRackCommentsOffset);
          fbb.addOffset(11, binsLockedAndSecureOffset);
          fbb.addOffset(12, binsLockedAndSecureCommentsOffset);
          fbb.addOffset(13, safetyHarnessOffset);
          fbb.addOffset(14, safetyHarnessCommentsOffset);
          fbb.addInt64(17, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(18, idDBROffset);
          fbb.addInt64(19, object.controlForm.targetId);
          fbb.addOffset(20, ladderStrapsOffset);
          fbb.addOffset(21, ladderStrapsCommentsOffset);
          fbb.addOffset(22, lanyardSafetyHarnessOffset);
          fbb.addOffset(23, lanyardSafetyHarnessCommentsOffset);
          fbb.addOffset(24, ladderImagesOffset);
          fbb.addOffset(25, ladderPathOffset);
          fbb.addOffset(26, stepLadderImagesOffset);
          fbb.addOffset(27, stepLadderPathOffset);
          fbb.addOffset(28, ladderStrapsImagesOffset);
          fbb.addOffset(29, ladderStrapsPathOffset);
          fbb.addOffset(30, hydraulicFluidForBucketImagesOffset);
          fbb.addOffset(31, hydraulicFluidForBucketPathOffset);
          fbb.addOffset(32, fiberReelRackImagesOffset);
          fbb.addOffset(33, fiberReelRackPathOffset);
          fbb.addOffset(34, binsLockedAndSecureImagesOffset);
          fbb.addOffset(35, binsLockedAndSecurePathOffset);
          fbb.addOffset(36, safetyHarnessImagesOffset);
          fbb.addOffset(37, safetyHarnessPathOffset);
          fbb.addOffset(38, lanyardSafetyHarnessImagesOffset);
          fbb.addOffset(39, lanyardSafetyHarnessPathOffset);
          fbb.addOffset(40, ladderNamesOffset);
          fbb.addOffset(41, stepLadderNamesOffset);
          fbb.addOffset(42, ladderStrapsNamesOffset);
          fbb.addOffset(43, hydraulicFluidForBucketNamesOffset);
          fbb.addOffset(44, fiberReelRackNamesOffset);
          fbb.addOffset(45, binsLockedAndSecureNamesOffset);
          fbb.addOffset(46, safetyHarnessNamesOffset);
          fbb.addOffset(47, lanyardSafetyHarnessNamesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Extra(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              ladder: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              ladderComments: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              ladderImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 52, []),
              ladderPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 54, []),
              ladderNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 84, []),
              stepLadder: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              stepLadderComments: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              stepLadderImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 56, []),
              stepLadderPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 58, []),
              stepLadderNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 86, []),
              ladderStraps: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 44, ''),
              ladderStrapsComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 46, ''),
              ladderStrapsImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 60, []),
              ladderStrapsPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 62, []),
              ladderStrapsNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 88, []),
              hydraulicFluidForBucket: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              hydraulicFluidForBucketComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              hydraulicFluidForBucketImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 64, []),
              hydraulicFluidForBucketPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 66, []),
              hydraulicFluidForBucketNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 90, []),
              fiberReelRack: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              fiberReelRackComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              fiberReelRackImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 68, []),
              fiberReelRackPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 70, []),
              fiberReelRackNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 92, []),
              binsLockedAndSecure: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              binsLockedAndSecureComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''),
              binsLockedAndSecureImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 72, []),
              binsLockedAndSecurePath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 74, []),
              binsLockedAndSecureNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 94, []),
              safetyHarness: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              safetyHarnessComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 32, ''),
              safetyHarnessImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 76, []),
              safetyHarnessPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 78, []),
              safetyHarnessNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 96, []),
              lanyardSafetyHarness: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 48, ''),
              lanyardSafetyHarnessComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 50, ''),
              lanyardSafetyHarnessImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 80, []),
              lanyardSafetyHarnessPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 82, []),
              lanyardSafetyHarnessNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 98, []),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 40));
          object.controlForm.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          object.controlForm.attach(store);
          InternalToManyAccess.setRelInfo<Extra>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  49, object.id, (Bitacora srcObject) => srcObject.extra));
          return object;
        }),
    FluidsCheck: EntityDefinition<FluidsCheck>(
        model: _entities[5],
        toOneRelations: (FluidsCheck object) => [object.controlForm],
        toManyRelations: (FluidsCheck object) => {
              RelInfo<Bitacora>.toOneBacklink(46, object.id,
                      (Bitacora srcObject) => srcObject.fluidsCheck):
                  object.bitacora
            },
        getId: (FluidsCheck object) => object.id,
        setId: (FluidsCheck object, int id) {
          object.id = id;
        },
        objectToFB: (FluidsCheck object, fb.Builder fbb) {
          final engineOilOffset = fbb.writeString(object.engineOil);
          final engineOilCommentsOffset =
              fbb.writeString(object.engineOilComments);
          final transmissionOffset = fbb.writeString(object.transmission);
          final transmissionCommentsOffset =
              fbb.writeString(object.transmissionComments);
          final coolantOffset = fbb.writeString(object.coolant);
          final coolantCommentsOffset = fbb.writeString(object.coolantComments);
          final powerSteeringOffset = fbb.writeString(object.powerSteering);
          final powerSteeringCommentsOffset =
              fbb.writeString(object.powerSteeringComments);
          final windshieldWasherFluidOffset =
              fbb.writeString(object.windshieldWasherFluid);
          final windshieldWasherFluidCommentsOffset =
              fbb.writeString(object.windshieldWasherFluidComments);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final dieselExhaustFluidOffset =
              fbb.writeString(object.dieselExhaustFluid);
          final dieselExhaustFluidCommentsOffset =
              fbb.writeString(object.dieselExhaustFluidComments);
          final engineOilImagesOffset = fbb.writeList(object.engineOilImages
              .map(fbb.writeString)
              .toList(growable: false));
          final engineOilPathOffset = fbb.writeList(object.engineOilPath
              .map(fbb.writeString)
              .toList(growable: false));
          final transmissionImagesOffset = fbb.writeList(object
              .transmissionImages
              .map(fbb.writeString)
              .toList(growable: false));
          final transmissionPathOffset = fbb.writeList(object.transmissionPath
              .map(fbb.writeString)
              .toList(growable: false));
          final coolantImagesOffset = fbb.writeList(object.coolantImages
              .map(fbb.writeString)
              .toList(growable: false));
          final coolantPathOffset = fbb.writeList(
              object.coolantPath.map(fbb.writeString).toList(growable: false));
          final powerSteeringImagesOffset = fbb.writeList(object
              .powerSteeringImages
              .map(fbb.writeString)
              .toList(growable: false));
          final powerSteeringPathOffset = fbb.writeList(object.powerSteeringPath
              .map(fbb.writeString)
              .toList(growable: false));
          final dieselExhaustFluidImagesOffset = fbb.writeList(object
              .dieselExhaustFluidImages
              .map(fbb.writeString)
              .toList(growable: false));
          final dieselExhaustFluidPathOffset = fbb.writeList(object
              .dieselExhaustFluidPath
              .map(fbb.writeString)
              .toList(growable: false));
          final windshieldWasherFluidImagesOffset = fbb.writeList(object
              .windshieldWasherFluidImages
              .map(fbb.writeString)
              .toList(growable: false));
          final windshieldWasherFluidPathOffset = fbb.writeList(object
              .windshieldWasherFluidPath
              .map(fbb.writeString)
              .toList(growable: false));
          final engineOilNamesOffset = fbb.writeList(object.engineOilNames
              .map(fbb.writeString)
              .toList(growable: false));
          final transmissionNamesOffset = fbb.writeList(object.transmissionNames
              .map(fbb.writeString)
              .toList(growable: false));
          final coolantNamesOffset = fbb.writeList(
              object.coolantNames.map(fbb.writeString).toList(growable: false));
          final powerSteeringNamesOffset = fbb.writeList(object
              .powerSteeringNames
              .map(fbb.writeString)
              .toList(growable: false));
          final dieselExhaustFluidNamesOffset = fbb.writeList(object
              .dieselExhaustFluidNames
              .map(fbb.writeString)
              .toList(growable: false));
          final windshieldWasherFluidNamesOffset = fbb.writeList(object
              .windshieldWasherFluidNames
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(37);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, engineOilOffset);
          fbb.addOffset(2, engineOilCommentsOffset);
          fbb.addOffset(3, transmissionOffset);
          fbb.addOffset(4, transmissionCommentsOffset);
          fbb.addOffset(5, coolantOffset);
          fbb.addOffset(6, coolantCommentsOffset);
          fbb.addOffset(7, powerSteeringOffset);
          fbb.addOffset(8, powerSteeringCommentsOffset);
          fbb.addOffset(11, windshieldWasherFluidOffset);
          fbb.addOffset(12, windshieldWasherFluidCommentsOffset);
          fbb.addInt64(13, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(14, idDBROffset);
          fbb.addInt64(15, object.controlForm.targetId);
          fbb.addOffset(16, dieselExhaustFluidOffset);
          fbb.addOffset(17, dieselExhaustFluidCommentsOffset);
          fbb.addOffset(18, engineOilImagesOffset);
          fbb.addOffset(19, engineOilPathOffset);
          fbb.addOffset(20, transmissionImagesOffset);
          fbb.addOffset(21, transmissionPathOffset);
          fbb.addOffset(22, coolantImagesOffset);
          fbb.addOffset(23, coolantPathOffset);
          fbb.addOffset(24, powerSteeringImagesOffset);
          fbb.addOffset(25, powerSteeringPathOffset);
          fbb.addOffset(26, dieselExhaustFluidImagesOffset);
          fbb.addOffset(27, dieselExhaustFluidPathOffset);
          fbb.addOffset(28, windshieldWasherFluidImagesOffset);
          fbb.addOffset(29, windshieldWasherFluidPathOffset);
          fbb.addOffset(30, engineOilNamesOffset);
          fbb.addOffset(31, transmissionNamesOffset);
          fbb.addOffset(32, coolantNamesOffset);
          fbb.addOffset(33, powerSteeringNamesOffset);
          fbb.addOffset(34, dieselExhaustFluidNamesOffset);
          fbb.addOffset(35, windshieldWasherFluidNamesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FluidsCheck(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              engineOil: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              engineOilComments: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              engineOilImages:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 40, []),
              engineOilPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 42, []),
              engineOilNames:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 64, []),
              transmission: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              transmissionComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 12, ''),
              transmissionImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 44, []),
              transmissionPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 46, []),
              transmissionNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 66, []),
              coolant: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 14, ''),
              coolantComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 16, ''),
              coolantImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 48, []),
              coolantPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 50, []),
              coolantNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 68, []),
              powerSteering: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              powerSteeringComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              powerSteeringImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 52, []),
              powerSteeringPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 54, []),
              powerSteeringNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 70, []),
              dieselExhaustFluid: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 36, ''),
              dieselExhaustFluidComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 38, ''),
              dieselExhaustFluidImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 56, []),
              dieselExhaustFluidPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 58, []),
              dieselExhaustFluidNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 72, []),
              windshieldWasherFluid: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              windshieldWasherFluidComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''),
              windshieldWasherFluidImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 60, []),
              windshieldWasherFluidPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 62, []),
              windshieldWasherFluidNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 74, []),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32));
          object.controlForm.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.controlForm.attach(store);
          InternalToManyAccess.setRelInfo<FluidsCheck>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(46, object.id,
                  (Bitacora srcObject) => srcObject.fluidsCheck));
          return object;
        }),
    Lights: EntityDefinition<Lights>(
        model: _entities[6],
        toOneRelations: (Lights object) => [object.controlForm],
        toManyRelations: (Lights object) => {
              RelInfo<Bitacora>.toOneBacklink(
                      44, object.id, (Bitacora srcObject) => srcObject.lights):
                  object.bitacora
            },
        getId: (Lights object) => object.id,
        setId: (Lights object, int id) {
          object.id = id;
        },
        objectToFB: (Lights object, fb.Builder fbb) {
          final headLightsOffset = fbb.writeString(object.headLights);
          final headLightsCommentsOffset =
              fbb.writeString(object.headLightsComments);
          final brakeLightsOffset = fbb.writeString(object.brakeLights);
          final brakeLightsCommentsOffset =
              fbb.writeString(object.brakeLightsComments);
          final reverseLightsOffset = fbb.writeString(object.reverseLights);
          final reverseLightsCommentsOffset =
              fbb.writeString(object.reverseLightsComments);
          final warningLightsOffset = fbb.writeString(object.warningLights);
          final warningLightsCommentsOffset =
              fbb.writeString(object.warningLightsComments);
          final turnSignalsOffset = fbb.writeString(object.turnSignals);
          final turnSignalsCommentsOffset =
              fbb.writeString(object.turnSignalsComments);
          final dashLightsOffset = fbb.writeString(object.dashLights);
          final dashLightsCommentsOffset =
              fbb.writeString(object.dashLightsComments);
          final strobeLightsOffset = fbb.writeString(object.strobeLights);
          final strobeLightsCommentsOffset =
              fbb.writeString(object.strobeLightsComments);
          final cabRoofLightsOffset = fbb.writeString(object.cabRoofLights);
          final cabRoofLightsCommentsOffset =
              fbb.writeString(object.cabRoofLightsComments);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final fourWayFlashersOffset = fbb.writeString(object.fourWayFlashers);
          final fourWayFlashersCommentsOffset =
              fbb.writeString(object.fourWayFlashersComments);
          final headLightsImagesOffset = fbb.writeList(object.headLightsImages
              .map(fbb.writeString)
              .toList(growable: false));
          final headLightsPathOffset = fbb.writeList(object.headLightsPath
              .map(fbb.writeString)
              .toList(growable: false));
          final brakeLightsImagesOffset = fbb.writeList(object.brakeLightsImages
              .map(fbb.writeString)
              .toList(growable: false));
          final brakeLightsPathOffset = fbb.writeList(object.brakeLightsPath
              .map(fbb.writeString)
              .toList(growable: false));
          final reverseLightsImagesOffset = fbb.writeList(object
              .reverseLightsImages
              .map(fbb.writeString)
              .toList(growable: false));
          final reverseLightsPathOffset = fbb.writeList(object.reverseLightsPath
              .map(fbb.writeString)
              .toList(growable: false));
          final warningLightsImagesOffset = fbb.writeList(object
              .warningLightsImages
              .map(fbb.writeString)
              .toList(growable: false));
          final warningLightsPathOffset = fbb.writeList(object.warningLightsPath
              .map(fbb.writeString)
              .toList(growable: false));
          final turnSignalsImagesOffset = fbb.writeList(object.turnSignalsImages
              .map(fbb.writeString)
              .toList(growable: false));
          final turnSignalsPathOffset = fbb.writeList(object.turnSignalsPath
              .map(fbb.writeString)
              .toList(growable: false));
          final fourWayFlashersImagesOffset = fbb.writeList(object
              .fourWayFlashersImages
              .map(fbb.writeString)
              .toList(growable: false));
          final fourWayFlashersPathOffset = fbb.writeList(object
              .fourWayFlashersPath
              .map(fbb.writeString)
              .toList(growable: false));
          final dashLightsImagesOffset = fbb.writeList(object.dashLightsImages
              .map(fbb.writeString)
              .toList(growable: false));
          final dashLightsPathOffset = fbb.writeList(object.dashLightsPath
              .map(fbb.writeString)
              .toList(growable: false));
          final strobeLightsImagesOffset = fbb.writeList(object
              .strobeLightsImages
              .map(fbb.writeString)
              .toList(growable: false));
          final strobeLightsPathOffset = fbb.writeList(object.strobeLightsPath
              .map(fbb.writeString)
              .toList(growable: false));
          final cabRoofLightsImagesOffset = fbb.writeList(object
              .cabRoofLightsImages
              .map(fbb.writeString)
              .toList(growable: false));
          final cabRoofLightsPathOffset = fbb.writeList(object.cabRoofLightsPath
              .map(fbb.writeString)
              .toList(growable: false));
          final clearanceLightsImagesOffset = fbb.writeList(object
              .clearanceLightsImages
              .map(fbb.writeString)
              .toList(growable: false));
          final clearanceLightsPathOffset = fbb.writeList(object
              .clearanceLightsPath
              .map(fbb.writeString)
              .toList(growable: false));
          final clearanceLightsOffset = fbb.writeString(object.clearanceLights);
          final clearanceLightsCommentsOffset =
              fbb.writeString(object.clearanceLightsComments);
          final headLightsNamesOffset = fbb.writeList(object.headLightsNames
              .map(fbb.writeString)
              .toList(growable: false));
          final brakeLightsNamesOffset = fbb.writeList(object.brakeLightsNames
              .map(fbb.writeString)
              .toList(growable: false));
          final reverseLightsNamesOffset = fbb.writeList(object
              .reverseLightsNames
              .map(fbb.writeString)
              .toList(growable: false));
          final warningLightsNamesOffset = fbb.writeList(object
              .warningLightsNames
              .map(fbb.writeString)
              .toList(growable: false));
          final turnSignalsNamesOffset = fbb.writeList(object.turnSignalsNames
              .map(fbb.writeString)
              .toList(growable: false));
          final fourWayFlashersNamesOffset = fbb.writeList(object
              .fourWayFlashersNames
              .map(fbb.writeString)
              .toList(growable: false));
          final dashLightsNamesOffset = fbb.writeList(object.dashLightsNames
              .map(fbb.writeString)
              .toList(growable: false));
          final strobeLightsNamesOffset = fbb.writeList(object.strobeLightsNames
              .map(fbb.writeString)
              .toList(growable: false));
          final cabRoofLightsNamesOffset = fbb.writeList(object
              .cabRoofLightsNames
              .map(fbb.writeString)
              .toList(growable: false));
          final clearanceLightsNamesOffset = fbb.writeList(object
              .clearanceLightsNames
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(61);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, headLightsOffset);
          fbb.addOffset(2, headLightsCommentsOffset);
          fbb.addOffset(3, brakeLightsOffset);
          fbb.addOffset(4, brakeLightsCommentsOffset);
          fbb.addOffset(5, reverseLightsOffset);
          fbb.addOffset(6, reverseLightsCommentsOffset);
          fbb.addOffset(7, warningLightsOffset);
          fbb.addOffset(8, warningLightsCommentsOffset);
          fbb.addOffset(9, turnSignalsOffset);
          fbb.addOffset(10, turnSignalsCommentsOffset);
          fbb.addOffset(13, dashLightsOffset);
          fbb.addOffset(14, dashLightsCommentsOffset);
          fbb.addOffset(15, strobeLightsOffset);
          fbb.addOffset(16, strobeLightsCommentsOffset);
          fbb.addOffset(17, cabRoofLightsOffset);
          fbb.addOffset(18, cabRoofLightsCommentsOffset);
          fbb.addInt64(21, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(22, idDBROffset);
          fbb.addInt64(23, object.controlForm.targetId);
          fbb.addOffset(24, fourWayFlashersOffset);
          fbb.addOffset(25, fourWayFlashersCommentsOffset);
          fbb.addOffset(26, headLightsImagesOffset);
          fbb.addOffset(27, headLightsPathOffset);
          fbb.addOffset(28, brakeLightsImagesOffset);
          fbb.addOffset(29, brakeLightsPathOffset);
          fbb.addOffset(30, reverseLightsImagesOffset);
          fbb.addOffset(31, reverseLightsPathOffset);
          fbb.addOffset(32, warningLightsImagesOffset);
          fbb.addOffset(33, warningLightsPathOffset);
          fbb.addOffset(34, turnSignalsImagesOffset);
          fbb.addOffset(35, turnSignalsPathOffset);
          fbb.addOffset(36, fourWayFlashersImagesOffset);
          fbb.addOffset(37, fourWayFlashersPathOffset);
          fbb.addOffset(38, dashLightsImagesOffset);
          fbb.addOffset(39, dashLightsPathOffset);
          fbb.addOffset(40, strobeLightsImagesOffset);
          fbb.addOffset(41, strobeLightsPathOffset);
          fbb.addOffset(42, cabRoofLightsImagesOffset);
          fbb.addOffset(43, cabRoofLightsPathOffset);
          fbb.addOffset(46, clearanceLightsImagesOffset);
          fbb.addOffset(47, clearanceLightsPathOffset);
          fbb.addOffset(48, clearanceLightsOffset);
          fbb.addOffset(49, clearanceLightsCommentsOffset);
          fbb.addOffset(50, headLightsNamesOffset);
          fbb.addOffset(51, brakeLightsNamesOffset);
          fbb.addOffset(52, reverseLightsNamesOffset);
          fbb.addOffset(53, warningLightsNamesOffset);
          fbb.addOffset(54, turnSignalsNamesOffset);
          fbb.addOffset(55, fourWayFlashersNamesOffset);
          fbb.addOffset(56, dashLightsNamesOffset);
          fbb.addOffset(57, strobeLightsNamesOffset);
          fbb.addOffset(58, cabRoofLightsNamesOffset);
          fbb.addOffset(59, clearanceLightsNamesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Lights(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              headLights: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              headLightsComments: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              headLightsImages:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 56, []),
              headLightsPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 58, []),
              headLightsNames:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 104, []),
              brakeLights: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              brakeLightsComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 12, ''),
              brakeLightsImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 60, []),
              brakeLightsPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 62, []),
              brakeLightsNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 106, []),
              reverseLights: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 14, ''),
              reverseLightsComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 16, ''),
              reverseLightsImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 64, []),
              reverseLightsPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 66, []),
              reverseLightsNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 108, []),
              warningLights: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              warningLightsComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              warningLightsImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 68, []),
              warningLightsPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 70, []),
              warningLightsNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 110, []),
              turnSignals: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              turnSignalsComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              turnSignalsImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 72, []),
              turnSignalsPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 74, []),
              turnSignalsNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 112, []),
              fourWayFlashers: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 52, ''),
              fourWayFlashersComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 54, ''),
              fourWayFlashersImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 76, []),
              fourWayFlashersPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 78, []),
              fourWayFlashersNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 114, []),
              dashLights: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              dashLightsComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 32, ''),
              dashLightsImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 80, []),
              dashLightsPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 82, []),
              dashLightsNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 116, []),
              strobeLights: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 34, ''),
              strobeLightsComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 36, ''),
              strobeLightsImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 84, []),
              strobeLightsPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 86, []),
              strobeLightsNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 118, []),
              cabRoofLights: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 38, ''),
              cabRoofLightsComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 40, ''),
              cabRoofLightsImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 88, []),
              cabRoofLightsPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 90, []),
              cabRoofLightsNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 120, []),
              clearanceLights: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 100, ''),
              clearanceLightsComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 102, ''),
              clearanceLightsImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 96, []),
              clearanceLightsPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 98, []),
              clearanceLightsNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 122, []),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 48));
          object.controlForm.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
          object.controlForm.attach(store);
          InternalToManyAccess.setRelInfo<Lights>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  44, object.id, (Bitacora srcObject) => srcObject.lights));
          return object;
        }),
    Measures: EntityDefinition<Measures>(
        model: _entities[7],
        toOneRelations: (Measures object) => [object.controlForm],
        toManyRelations: (Measures object) => {
              RelInfo<Bitacora>.toOneBacklink(43, object.id,
                  (Bitacora srcObject) => srcObject.measures): object.bitacora
            },
        getId: (Measures object) => object.id,
        setId: (Measures object, int id) {
          object.id = id;
        },
        objectToFB: (Measures object, fb.Builder fbb) {
          final gasOffset = fbb.writeString(object.gas);
          final gasCommentsOffset = fbb.writeString(object.gasComments);
          final mileageCommentsOffset = fbb.writeString(object.mileageComments);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final gasPathOffset = fbb.writeList(
              object.gasPath.map(fbb.writeString).toList(growable: false));
          final mileagePathOffset = fbb.writeList(
              object.mileagePath.map(fbb.writeString).toList(growable: false));
          final gasImagesOffset = fbb.writeList(
              object.gasImages.map(fbb.writeString).toList(growable: false));
          final mileageImagesOffset = fbb.writeList(object.mileageImages
              .map(fbb.writeString)
              .toList(growable: false));
          final gasNamesOffset = fbb.writeList(
              object.gasNames.map(fbb.writeString).toList(growable: false));
          final mileageNamesOffset = fbb.writeList(
              object.mileageNames.map(fbb.writeString).toList(growable: false));
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, gasOffset);
          fbb.addOffset(2, gasCommentsOffset);
          fbb.addInt64(3, object.mileage);
          fbb.addOffset(4, mileageCommentsOffset);
          fbb.addInt64(5, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(6, idDBROffset);
          fbb.addInt64(7, object.controlForm.targetId);
          fbb.addOffset(10, gasPathOffset);
          fbb.addOffset(12, mileagePathOffset);
          fbb.addOffset(13, gasImagesOffset);
          fbb.addOffset(14, mileageImagesOffset);
          fbb.addOffset(15, gasNamesOffset);
          fbb.addOffset(16, mileageNamesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Measures(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              gas: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              gasComments: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              gasImages:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 30, []),
              gasNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 34, []),
              gasPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 24, []),
              mileage:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              mileageComments: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              mileageImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 32, []),
              mileageNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 36, []),
              mileagePath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 28, []),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 16));
          object.controlForm.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.controlForm.attach(store);
          InternalToManyAccess.setRelInfo<Measures>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  43, object.id, (Bitacora srcObject) => srcObject.measures));
          return object;
        }),
    Security: EntityDefinition<Security>(
        model: _entities[8],
        toOneRelations: (Security object) => [object.controlForm],
        toManyRelations: (Security object) => {
              RelInfo<Bitacora>.toOneBacklink(48, object.id,
                  (Bitacora srcObject) => srcObject.security): object.bitacora
            },
        getId: (Security object) => object.id,
        setId: (Security object, int id) {
          object.id = id;
        },
        objectToFB: (Security object, fb.Builder fbb) {
          final rtaMagnetOffset = fbb.writeString(object.rtaMagnet);
          final rtaMagnetCommentsOffset =
              fbb.writeString(object.rtaMagnetComments);
          final triangleReflectorsOffset =
              fbb.writeString(object.triangleReflectors);
          final triangleReflectorsCommentsOffset =
              fbb.writeString(object.triangleReflectorsComments);
          final wheelChocksOffset = fbb.writeString(object.wheelChocks);
          final wheelChocksCommentsOffset =
              fbb.writeString(object.wheelChocksComments);
          final fireExtinguisherOffset =
              fbb.writeString(object.fireExtinguisher);
          final fireExtinguisherCommentsOffset =
              fbb.writeString(object.fireExtinguisherComments);
          final backUpAlarmOffset = fbb.writeString(object.backUpAlarm);
          final backUpAlarmCommentsOffset =
              fbb.writeString(object.backUpAlarmComments);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final firstAidKitSafetyVestOffset =
              fbb.writeString(object.firstAidKitSafetyVest);
          final firstAidKitSafetyVestCommentsOffset =
              fbb.writeString(object.firstAidKitSafetyVestComments);
          final rtaMagnetImagesOffset = fbb.writeList(object.rtaMagnetImages
              .map(fbb.writeString)
              .toList(growable: false));
          final rtaMagnetPathOffset = fbb.writeList(object.rtaMagnetPath
              .map(fbb.writeString)
              .toList(growable: false));
          final triangleReflectorsImagesOffset = fbb.writeList(object
              .triangleReflectorsImages
              .map(fbb.writeString)
              .toList(growable: false));
          final triangleReflectorsPathOffset = fbb.writeList(object
              .triangleReflectorsPath
              .map(fbb.writeString)
              .toList(growable: false));
          final wheelChocksImagesOffset = fbb.writeList(object.wheelChocksImages
              .map(fbb.writeString)
              .toList(growable: false));
          final wheelChocksPathOffset = fbb.writeList(object.wheelChocksPath
              .map(fbb.writeString)
              .toList(growable: false));
          final fireExtinguisherImagesOffset = fbb.writeList(object
              .fireExtinguisherImages
              .map(fbb.writeString)
              .toList(growable: false));
          final fireExtinguisherPathOffset = fbb.writeList(object
              .fireExtinguisherPath
              .map(fbb.writeString)
              .toList(growable: false));
          final firstAidKitSafetyVestImagesOffset = fbb.writeList(object
              .firstAidKitSafetyVestImages
              .map(fbb.writeString)
              .toList(growable: false));
          final firstAidKitSafetyVestPathOffset = fbb.writeList(object
              .firstAidKitSafetyVestPath
              .map(fbb.writeString)
              .toList(growable: false));
          final backUpAlarmImagesOffset = fbb.writeList(object.backUpAlarmImages
              .map(fbb.writeString)
              .toList(growable: false));
          final backUpAlarmPathOffset = fbb.writeList(object.backUpAlarmPath
              .map(fbb.writeString)
              .toList(growable: false));
          final rtaMagnetNamesOffset = fbb.writeList(object.rtaMagnetNames
              .map(fbb.writeString)
              .toList(growable: false));
          final triangleReflectorsNamesOffset = fbb.writeList(object
              .triangleReflectorsNames
              .map(fbb.writeString)
              .toList(growable: false));
          final wheelChocksNamesOffset = fbb.writeList(object.wheelChocksNames
              .map(fbb.writeString)
              .toList(growable: false));
          final fireExtinguisherNamesOffset = fbb.writeList(object
              .fireExtinguisherNames
              .map(fbb.writeString)
              .toList(growable: false));
          final firstAidKitSafetyVestNamesOffset = fbb.writeList(object
              .firstAidKitSafetyVestNames
              .map(fbb.writeString)
              .toList(growable: false));
          final backUpAlarmNamesOffset = fbb.writeList(object.backUpAlarmNames
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(39);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, rtaMagnetOffset);
          fbb.addOffset(2, rtaMagnetCommentsOffset);
          fbb.addOffset(3, triangleReflectorsOffset);
          fbb.addOffset(4, triangleReflectorsCommentsOffset);
          fbb.addOffset(5, wheelChocksOffset);
          fbb.addOffset(6, wheelChocksCommentsOffset);
          fbb.addOffset(7, fireExtinguisherOffset);
          fbb.addOffset(8, fireExtinguisherCommentsOffset);
          fbb.addOffset(11, backUpAlarmOffset);
          fbb.addOffset(12, backUpAlarmCommentsOffset);
          fbb.addInt64(13, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(14, idDBROffset);
          fbb.addInt64(15, object.controlForm.targetId);
          fbb.addOffset(18, firstAidKitSafetyVestOffset);
          fbb.addOffset(19, firstAidKitSafetyVestCommentsOffset);
          fbb.addOffset(20, rtaMagnetImagesOffset);
          fbb.addOffset(21, rtaMagnetPathOffset);
          fbb.addOffset(22, triangleReflectorsImagesOffset);
          fbb.addOffset(23, triangleReflectorsPathOffset);
          fbb.addOffset(24, wheelChocksImagesOffset);
          fbb.addOffset(25, wheelChocksPathOffset);
          fbb.addOffset(26, fireExtinguisherImagesOffset);
          fbb.addOffset(27, fireExtinguisherPathOffset);
          fbb.addOffset(28, firstAidKitSafetyVestImagesOffset);
          fbb.addOffset(29, firstAidKitSafetyVestPathOffset);
          fbb.addOffset(30, backUpAlarmImagesOffset);
          fbb.addOffset(31, backUpAlarmPathOffset);
          fbb.addOffset(32, rtaMagnetNamesOffset);
          fbb.addOffset(33, triangleReflectorsNamesOffset);
          fbb.addOffset(34, wheelChocksNamesOffset);
          fbb.addOffset(35, fireExtinguisherNamesOffset);
          fbb.addOffset(36, firstAidKitSafetyVestNamesOffset);
          fbb.addOffset(37, backUpAlarmNamesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Security(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              rtaMagnet: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              rtaMagnetComments: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              rtaMagnetImages:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 44, []),
              rtaMagnetPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 46, []),
              rtaMagnetNames:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 68, []),
              triangleReflectors: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              triangleReflectorsComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 12, ''),
              triangleReflectorsImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 48, []),
              triangleReflectorsPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 50, []),
              triangleReflectorsNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 70, []),
              wheelChocks: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 14, ''),
              wheelChocksComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 16, ''),
              wheelChocksImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 52, []),
              wheelChocksPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 54, []),
              wheelChocksNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 72, []),
              fireExtinguisher: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              fireExtinguisherComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              fireExtinguisherImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 56, []),
              fireExtinguisherPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 58, []),
              fireExtinguisherNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 74, []),
              firstAidKitSafetyVest: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 40, ''),
              firstAidKitSafetyVestComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 42, ''),
              firstAidKitSafetyVestImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 60, []),
              firstAidKitSafetyVestPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 62, []),
              firstAidKitSafetyVestNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 76, []),
              backUpAlarm: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              backUpAlarmComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''),
              backUpAlarmImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 64, []),
              backUpAlarmPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 66, []),
              backUpAlarmNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 78, []),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32));
          object.controlForm.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.controlForm.attach(store);
          InternalToManyAccess.setRelInfo<Security>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  48, object.id, (Bitacora srcObject) => srcObject.security));
          return object;
        }),
    BucketInspection: EntityDefinition<BucketInspection>(
        model: _entities[9],
        toOneRelations: (BucketInspection object) => [object.controlForm],
        toManyRelations: (BucketInspection object) => {
              RelInfo<Bitacora>.toOneBacklink(51, object.id,
                      (Bitacora srcObject) => srcObject.bucketInspection):
                  object.bitacora
            },
        getId: (BucketInspection object) => object.id,
        setId: (BucketInspection object, int id) {
          object.id = id;
        },
        objectToFB: (BucketInspection object, fb.Builder fbb) {
          final insulatedOffset = fbb.writeString(object.insulated);
          final insulatedCommentsOffset =
              fbb.writeString(object.insulatedComments);
          final holesDrilledOffset = fbb.writeString(object.holesDrilled);
          final holesDrilledCommentsOffset =
              fbb.writeString(object.holesDrilledComments);
          final bucketLinerOffset = fbb.writeString(object.bucketLiner);
          final bucketLinerCommentsOffset =
              fbb.writeString(object.bucketLinerComments);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final insulatedImagesOffset = fbb.writeList(object.insulatedImages
              .map(fbb.writeString)
              .toList(growable: false));
          final insulatedPathOffset = fbb.writeList(object.insulatedPath
              .map(fbb.writeString)
              .toList(growable: false));
          final holesDrilledImagesOffset = fbb.writeList(object
              .holesDrilledImages
              .map(fbb.writeString)
              .toList(growable: false));
          final holesDrilledPathOffset = fbb.writeList(object.holesDrilledPath
              .map(fbb.writeString)
              .toList(growable: false));
          final bucketLinerImagesOffset = fbb.writeList(object.bucketLinerImages
              .map(fbb.writeString)
              .toList(growable: false));
          final bucketLinerPathOffset = fbb.writeList(object.bucketLinerPath
              .map(fbb.writeString)
              .toList(growable: false));
          final insulatedNamesOffset = fbb.writeList(object.insulatedNames
              .map(fbb.writeString)
              .toList(growable: false));
          final holesDrilledNamesOffset = fbb.writeList(object.holesDrilledNames
              .map(fbb.writeString)
              .toList(growable: false));
          final bucketLinerNamesOffset = fbb.writeList(object.bucketLinerNames
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, insulatedOffset);
          fbb.addOffset(2, insulatedCommentsOffset);
          fbb.addOffset(3, holesDrilledOffset);
          fbb.addOffset(4, holesDrilledCommentsOffset);
          fbb.addOffset(5, bucketLinerOffset);
          fbb.addOffset(6, bucketLinerCommentsOffset);
          fbb.addInt64(7, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(8, idDBROffset);
          fbb.addInt64(9, object.controlForm.targetId);
          fbb.addOffset(10, insulatedImagesOffset);
          fbb.addOffset(11, insulatedPathOffset);
          fbb.addOffset(12, holesDrilledImagesOffset);
          fbb.addOffset(13, holesDrilledPathOffset);
          fbb.addOffset(14, bucketLinerImagesOffset);
          fbb.addOffset(15, bucketLinerPathOffset);
          fbb.addOffset(16, insulatedNamesOffset);
          fbb.addOffset(17, holesDrilledNamesOffset);
          fbb.addOffset(18, bucketLinerNamesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BucketInspection(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              insulated: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              insulatedComments: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              insulatedImages:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 24, []),
              insulatedPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 26, []),
              insulatedNames:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 36, []),
              holesDrilled: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              holesDrilledComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 12, ''),
              holesDrilledImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 28, []),
              holesDrilledPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 30, []),
              holesDrilledNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 38, []),
              bucketLiner: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 14, ''),
              bucketLinerComments: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 16, ''),
              bucketLinerImages: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 32, []),
              bucketLinerPath: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 34, []),
              bucketLinerNames: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 40, []),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20));
          object.controlForm.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.controlForm.attach(store);
          InternalToManyAccess.setRelInfo<BucketInspection>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(51, object.id,
                  (Bitacora srcObject) => srcObject.bucketInspection));
          return object;
        }),
    Company: EntityDefinition<Company>(
        model: _entities[10],
        toOneRelations: (Company object) => [],
        toManyRelations: (Company object) => {
              RelInfo<Bitacora>.toOneBacklink(
                      53, object.id, (Bitacora srcObject) => srcObject.company):
                  object.bitacora
            },
        getId: (Company object) => object.id,
        setId: (Company object, int id) {
          object.id = id;
        },
        objectToFB: (Company object, fb.Builder fbb) {
          final companyOffset = fbb.writeString(object.company);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, companyOffset);
          fbb.addInt64(2, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Company(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              company: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          InternalToManyAccess.setRelInfo<Company>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  53, object.id, (Bitacora srcObject) => srcObject.company));
          return object;
        }),
    Role: EntityDefinition<Role>(
        model: _entities[11],
        toOneRelations: (Role object) => [object.bitacora],
        toManyRelations: (Role object) =>
            {RelInfo<Role>.toMany(94, object.id): object.users},
        getId: (Role object) => object.id,
        setId: (Role object, int id) {
          object.id = id;
        },
        objectToFB: (Role object, fb.Builder fbb) {
          final roleOffset = fbb.writeString(object.role);
          final idDBROffset = fbb.writeString(object.idDBR);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, roleOffset);
          fbb.addInt64(2, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.addInt64(4, object.bitacora.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Role(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              role: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.bitacora.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.bitacora.attach(store);
          InternalToManyAccess.setRelInfo<Role>(
              object.users, store, RelInfo<Role>.toMany(94, object.id));
          return object;
        }),
    Status: EntityDefinition<Status>(
        model: _entities[12],
        toOneRelations: (Status object) => [],
        toManyRelations: (Status object) => {
              RelInfo<Bitacora>.toOneBacklink(
                      52, object.id, (Bitacora srcObject) => srcObject.status):
                  object.bitacora
            },
        getId: (Status object) => object.id,
        setId: (Status object, int id) {
          object.id = id;
        },
        objectToFB: (Status object, fb.Builder fbb) {
          final statusOffset = fbb.writeString(object.status);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, statusOffset);
          fbb.addInt64(2, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Status(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          InternalToManyAccess.setRelInfo<Status>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  52, object.id, (Bitacora srcObject) => srcObject.status));
          return object;
        }),
    Vehicle: EntityDefinition<Vehicle>(
        model: _entities[13],
        toOneRelations: (Vehicle object) => [
              object.status,
              object.company,
              object.ruleOilChange,
              object.ruleTransmissionFluidChange,
              object.ruleRadiatorFluidChange,
              object.ruleTireChange,
              object.ruleBrakeChange
            ],
        toManyRelations: (Vehicle object) => {
              RelInfo<Bitacora>.toOneBacklink(
                      54, object.id, (Bitacora srcObject) => srcObject.vehicle):
                  object.bitacora,
              RelInfo<VehicleServices>.toOneBacklink(6, object.id,
                      (VehicleServices srcObject) => srcObject.vehicle):
                  object.vehicleServices
            },
        getId: (Vehicle object) => object.id,
        setId: (Vehicle object, int id) {
          object.id = id;
        },
        objectToFB: (Vehicle object, fb.Builder fbb) {
          final makeOffset = fbb.writeString(object.make);
          final modelOffset = fbb.writeString(object.model);
          final yearOffset = fbb.writeString(object.year);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final pathOffset =
              object.path == null ? null : fbb.writeString(object.path!);
          final vinOffset = fbb.writeString(object.vin);
          final motorOffset = fbb.writeString(object.motor);
          final colorOffset = fbb.writeString(object.color);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final licensePlatesOffset = fbb.writeString(object.licensePlates);
          fbb.startTable(35);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, makeOffset);
          fbb.addOffset(2, modelOffset);
          fbb.addOffset(3, yearOffset);
          fbb.addOffset(4, imageOffset);
          fbb.addOffset(5, pathOffset);
          fbb.addOffset(6, vinOffset);
          fbb.addOffset(8, motorOffset);
          fbb.addOffset(9, colorOffset);
          fbb.addInt64(10, object.oilChangeDue?.millisecondsSinceEpoch);
          fbb.addInt64(13, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(14, idDBROffset);
          fbb.addInt64(15, object.status.targetId);
          fbb.addInt64(16, object.company.targetId);
          fbb.addOffset(17, licensePlatesOffset);
          fbb.addInt64(
              18, object.lastTransmissionFluidChange?.millisecondsSinceEpoch);
          fbb.addInt64(
              19, object.lastRadiatorFluidChange?.millisecondsSinceEpoch);
          fbb.addInt64(23, object.ruleOilChange.targetId);
          fbb.addInt64(24, object.ruleTransmissionFluidChange.targetId);
          fbb.addInt64(25, object.ruleRadiatorFluidChange.targetId);
          fbb.addInt64(26, object.mileage);
          fbb.addBool(27, object.carWash);
          fbb.addBool(28, object.weeklyCheckUp);
          fbb.addBool(29, object.filterCheckTSM);
          fbb.addInt64(30, object.lastTireChange?.millisecondsSinceEpoch);
          fbb.addInt64(31, object.lastBrakeChange?.millisecondsSinceEpoch);
          fbb.addInt64(32, object.ruleTireChange.targetId);
          fbb.addInt64(33, object.ruleBrakeChange.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final oilChangeDueValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final lastTransmissionFluidChangeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 40);
          final lastRadiatorFluidChangeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 42);
          final lastTireChangeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 64);
          final lastBrakeChangeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 66);
          final object = Vehicle(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              make: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              model: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              year: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              vin: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              licensePlates: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 38, ''),
              motor:
                  const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              color: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              mileage: const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0),
              oilChangeDue: oilChangeDueValue == null ? null : DateTime.fromMillisecondsSinceEpoch(oilChangeDueValue),
              lastTransmissionFluidChange: lastTransmissionFluidChangeValue == null ? null : DateTime.fromMillisecondsSinceEpoch(lastTransmissionFluidChangeValue),
              lastRadiatorFluidChange: lastRadiatorFluidChangeValue == null ? null : DateTime.fromMillisecondsSinceEpoch(lastRadiatorFluidChangeValue),
              lastTireChange: lastTireChangeValue == null ? null : DateTime.fromMillisecondsSinceEpoch(lastTireChangeValue),
              lastBrakeChange: lastBrakeChangeValue == null ? null : DateTime.fromMillisecondsSinceEpoch(lastBrakeChangeValue),
              carWash: const fb.BoolReader().vTableGet(buffer, rootOffset, 58, false),
              weeklyCheckUp: const fb.BoolReader().vTableGet(buffer, rootOffset, 60, false),
              filterCheckTSM: const fb.BoolReader().vTableGet(buffer, rootOffset, 62, false),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32));
          object.status.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.status.attach(store);
          object.company.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.company.attach(store);
          object.ruleOilChange.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
          object.ruleOilChange.attach(store);
          object.ruleTransmissionFluidChange.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          object.ruleTransmissionFluidChange.attach(store);
          object.ruleRadiatorFluidChange.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 54, 0);
          object.ruleRadiatorFluidChange.attach(store);
          object.ruleTireChange.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 68, 0);
          object.ruleTireChange.attach(store);
          object.ruleBrakeChange.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 70, 0);
          object.ruleBrakeChange.attach(store);
          InternalToManyAccess.setRelInfo<Vehicle>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  54, object.id, (Bitacora srcObject) => srcObject.vehicle));
          InternalToManyAccess.setRelInfo<Vehicle>(
              object.vehicleServices,
              store,
              RelInfo<VehicleServices>.toOneBacklink(6, object.id,
                  (VehicleServices srcObject) => srcObject.vehicle));
          return object;
        }),
    Users: EntityDefinition<Users>(
        model: _entities[14],
        toOneRelations: (Users object) => [object.role, object.image],
        toManyRelations: (Users object) => {
              RelInfo<Users>.toMany(95, object.id): object.bitacora,
              RelInfo<Users>.toMany(96, object.id): object.roles
            },
        getId: (Users object) => object.id,
        setId: (Users object, int id) {
          object.id = id;
        },
        objectToFB: (Users object, fb.Builder fbb) {
          final lastNameOffset = fbb.writeString(object.lastName);
          final passwordOffset = fbb.writeString(object.password);
          final idDBROffset = fbb.writeString(object.idDBR);
          final firstNameOffset = fbb.writeString(object.firstName);
          final emailOffset = fbb.writeString(object.email);
          fbb.startTable(30);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, lastNameOffset);
          fbb.addOffset(8, passwordOffset);
          fbb.addOffset(13, idDBROffset);
          fbb.addInt64(14, object.role.targetId);
          fbb.addInt64(17, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(26, firstNameOffset);
          fbb.addOffset(27, emailOffset);
          fbb.addInt64(28, object.image.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Users(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 56, ''),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 58, ''),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, ''));
          object.role.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.role.attach(store);
          object.image.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 60, 0);
          object.image.attach(store);
          InternalToManyAccess.setRelInfo<Users>(
              object.bitacora, store, RelInfo<Users>.toMany(95, object.id));
          InternalToManyAccess.setRelInfo<Users>(
              object.roles, store, RelInfo<Users>.toMany(96, object.id));
          return object;
        }),
    Service: EntityDefinition<Service>(
        model: _entities[15],
        toOneRelations: (Service object) => [],
        toManyRelations: (Service object) => {
              RelInfo<Bitacora>.toOneBacklink(
                      56, object.id, (Bitacora srcObject) => srcObject.service):
                  object.bitacora
            },
        getId: (Service object) => object.id,
        setId: (Service object, int id) {
          object.id = id;
        },
        objectToFB: (Service object, fb.Builder fbb) {
          final serviceOffset = fbb.writeString(object.service);
          final descriptionOffset = fbb.writeString(object.description);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serviceOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Service(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              service: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          InternalToManyAccess.setRelInfo<Service>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  56, object.id, (Bitacora srcObject) => srcObject.service));
          return object;
        }),
    VehicleServices: EntityDefinition<VehicleServices>(
        model: _entities[16],
        toOneRelations: (VehicleServices object) =>
            [object.vehicle, object.service],
        toManyRelations: (VehicleServices object) => {
              RelInfo<Bitacora>.toOneBacklink(57, object.id,
                      (Bitacora srcObject) => srcObject.vehicleService):
                  object.bitacora
            },
        getId: (VehicleServices object) => object.id,
        setId: (VehicleServices object, int id) {
          object.id = id;
        },
        objectToFB: (VehicleServices object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.completed);
          fbb.addInt64(2, object.serviceDate?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.dateAdded.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.addInt64(5, object.vehicle.targetId);
          fbb.addInt64(6, object.service.targetId);
          fbb.addInt64(7, object.mileageRemaining);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final serviceDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = VehicleServices(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              completed:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false),
              serviceDate: serviceDateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(serviceDateValue),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              mileageRemaining: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          object.vehicle.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.vehicle.attach(store);
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.service.attach(store);
          InternalToManyAccess.setRelInfo<VehicleServices>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(57, object.id,
                  (Bitacora srcObject) => srcObject.vehicleService));
          return object;
        }),
    Rule: EntityDefinition<Rule>(
        model: _entities[17],
        toOneRelations: (Rule object) => [object.vehicle],
        toManyRelations: (Rule object) => {
              RelInfo<Bitacora>.toOneBacklink(
                      58, object.id, (Bitacora srcObject) => srcObject.rule):
                  object.bitacora
            },
        getId: (Rule object) => object.id,
        setId: (Rule object, int id) {
          object.id = id;
        },
        objectToFB: (Rule object, fb.Builder fbb) {
          final valueOffset = fbb.writeString(object.value);
          final registeredOffset = fbb.writeString(object.registered);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, valueOffset);
          fbb.addOffset(3, registeredOffset);
          fbb.addInt64(5, object.dateAdded.millisecondsSinceEpoch);
          fbb.addInt64(7, object.vehicle.targetId);
          fbb.addInt64(8, object.lastMileageService);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Rule(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              value: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              registered: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              lastMileageService:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)));
          object.vehicle.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.vehicle.attach(store);
          InternalToManyAccess.setRelInfo<Rule>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  58, object.id, (Bitacora srcObject) => srcObject.rule));
          return object;
        }),
    Image: EntityDefinition<Image>(
        model: _entities[18],
        toOneRelations: (Image object) => [object.user],
        toManyRelations: (Image object) => {
              RelInfo<Bitacora>.toOneBacklink(
                      60, object.id, (Bitacora srcObject) => srcObject.image):
                  object.bitacora
            },
        getId: (Image object) => object.id,
        setId: (Image object, int id) {
          object.id = id;
        },
        objectToFB: (Image object, fb.Builder fbb) {
          final urlOffset = fbb.writeString(object.url);
          final pathOffset = fbb.writeString(object.path);
          final base64Offset = fbb.writeString(object.base64);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, urlOffset);
          fbb.addInt64(3, object.dateAdded.millisecondsSinceEpoch);
          fbb.addInt64(4, object.user.targetId);
          fbb.addOffset(5, pathOffset);
          fbb.addOffset(6, base64Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Image(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              url: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              base64: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.user.attach(store);
          InternalToManyAccess.setRelInfo<Image>(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  60, object.id, (Bitacora srcObject) => srcObject.image));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Bitacora] entity fields to define ObjectBox queries.
class Bitacora_ {
  /// see [Bitacora.id]
  static final id = QueryIntegerProperty<Bitacora>(_entities[0].properties[0]);

  /// see [Bitacora.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Bitacora>(_entities[0].properties[1]);

  /// see [Bitacora.instruccionAdicional]
  static final instruccionAdicional =
      QueryStringProperty<Bitacora>(_entities[0].properties[2]);

  /// see [Bitacora.instruccion]
  static final instruccion =
      QueryStringProperty<Bitacora>(_entities[0].properties[3]);

  /// see [Bitacora.usuarioPropietario]
  static final usuarioPropietario =
      QueryStringProperty<Bitacora>(_entities[0].properties[4]);

  /// see [Bitacora.executeSupabase]
  static final executeSupabase =
      QueryBooleanProperty<Bitacora>(_entities[0].properties[5]);

  /// see [Bitacora.idControlForm]
  static final idControlForm =
      QueryIntegerProperty<Bitacora>(_entities[0].properties[6]);

  /// see [Bitacora.controlForm]
  static final controlForm =
      QueryRelationToOne<Bitacora, ControlForm>(_entities[0].properties[7]);

  /// see [Bitacora.measures]
  static final measures =
      QueryRelationToOne<Bitacora, Measures>(_entities[0].properties[8]);

  /// see [Bitacora.lights]
  static final lights =
      QueryRelationToOne<Bitacora, Lights>(_entities[0].properties[9]);

  /// see [Bitacora.carBodywork]
  static final carBodywork =
      QueryRelationToOne<Bitacora, CarBodywork>(_entities[0].properties[10]);

  /// see [Bitacora.fluidsCheck]
  static final fluidsCheck =
      QueryRelationToOne<Bitacora, FluidsCheck>(_entities[0].properties[11]);

  /// see [Bitacora.security]
  static final security =
      QueryRelationToOne<Bitacora, Security>(_entities[0].properties[12]);

  /// see [Bitacora.extra]
  static final extra =
      QueryRelationToOne<Bitacora, Extra>(_entities[0].properties[13]);

  /// see [Bitacora.equipment]
  static final equipment =
      QueryRelationToOne<Bitacora, Equipment>(_entities[0].properties[14]);

  /// see [Bitacora.bucketInspection]
  static final bucketInspection =
      QueryRelationToOne<Bitacora, BucketInspection>(
          _entities[0].properties[15]);

  /// see [Bitacora.status]
  static final status =
      QueryRelationToOne<Bitacora, Status>(_entities[0].properties[16]);

  /// see [Bitacora.company]
  static final company =
      QueryRelationToOne<Bitacora, Company>(_entities[0].properties[17]);

  /// see [Bitacora.vehicle]
  static final vehicle =
      QueryRelationToOne<Bitacora, Vehicle>(_entities[0].properties[18]);

  /// see [Bitacora.user]
  static final user =
      QueryRelationToOne<Bitacora, Users>(_entities[0].properties[19]);

  /// see [Bitacora.service]
  static final service =
      QueryRelationToOne<Bitacora, Service>(_entities[0].properties[20]);

  /// see [Bitacora.vehicleService]
  static final vehicleService = QueryRelationToOne<Bitacora, VehicleServices>(
      _entities[0].properties[21]);

  /// see [Bitacora.rule]
  static final rule =
      QueryRelationToOne<Bitacora, Rule>(_entities[0].properties[22]);

  /// see [Bitacora.image]
  static final image =
      QueryRelationToOne<Bitacora, Image>(_entities[0].properties[23]);
}

/// [ControlForm] entity fields to define ObjectBox queries.
class ControlForm_ {
  /// see [ControlForm.id]
  static final id =
      QueryIntegerProperty<ControlForm>(_entities[1].properties[0]);

  /// see [ControlForm.idDBR]
  static final idDBR =
      QueryStringProperty<ControlForm>(_entities[1].properties[1]);

  /// see [ControlForm.employee]
  static final employee =
      QueryRelationToOne<ControlForm, Users>(_entities[1].properties[2]);

  /// see [ControlForm.vehicle]
  static final vehicle =
      QueryRelationToOne<ControlForm, Vehicle>(_entities[1].properties[3]);

  /// see [ControlForm.dateAddedR]
  static final dateAddedR =
      QueryIntegerProperty<ControlForm>(_entities[1].properties[4]);

  /// see [ControlForm.dateAddedD]
  static final dateAddedD =
      QueryIntegerProperty<ControlForm>(_entities[1].properties[5]);

  /// see [ControlForm.issuesR]
  static final issuesR =
      QueryIntegerProperty<ControlForm>(_entities[1].properties[6]);

  /// see [ControlForm.issuesD]
  static final issuesD =
      QueryIntegerProperty<ControlForm>(_entities[1].properties[7]);

  /// see [ControlForm.measuresR]
  static final measuresR =
      QueryRelationToOne<ControlForm, Measures>(_entities[1].properties[8]);

  /// see [ControlForm.lightsR]
  static final lightsR =
      QueryRelationToOne<ControlForm, Lights>(_entities[1].properties[9]);

  /// see [ControlForm.carBodyworkR]
  static final carBodyworkR =
      QueryRelationToOne<ControlForm, CarBodywork>(_entities[1].properties[10]);

  /// see [ControlForm.fluidsCheckR]
  static final fluidsCheckR =
      QueryRelationToOne<ControlForm, FluidsCheck>(_entities[1].properties[11]);

  /// see [ControlForm.bucketInspectionR]
  static final bucketInspectionR =
      QueryRelationToOne<ControlForm, BucketInspection>(
          _entities[1].properties[12]);

  /// see [ControlForm.securityR]
  static final securityR =
      QueryRelationToOne<ControlForm, Security>(_entities[1].properties[13]);

  /// see [ControlForm.extraR]
  static final extraR =
      QueryRelationToOne<ControlForm, Extra>(_entities[1].properties[14]);

  /// see [ControlForm.equipmentR]
  static final equipmentR =
      QueryRelationToOne<ControlForm, Equipment>(_entities[1].properties[15]);

  /// see [ControlForm.measuresD]
  static final measuresD =
      QueryRelationToOne<ControlForm, Measures>(_entities[1].properties[16]);

  /// see [ControlForm.lightsD]
  static final lightsD =
      QueryRelationToOne<ControlForm, Lights>(_entities[1].properties[17]);

  /// see [ControlForm.carBodyworkD]
  static final carBodyworkD =
      QueryRelationToOne<ControlForm, CarBodywork>(_entities[1].properties[18]);

  /// see [ControlForm.fluidsCheckD]
  static final fluidsCheckD =
      QueryRelationToOne<ControlForm, FluidsCheck>(_entities[1].properties[19]);

  /// see [ControlForm.bucketInspectionD]
  static final bucketInspectionD =
      QueryRelationToOne<ControlForm, BucketInspection>(
          _entities[1].properties[20]);

  /// see [ControlForm.securityD]
  static final securityD =
      QueryRelationToOne<ControlForm, Security>(_entities[1].properties[21]);

  /// see [ControlForm.extraD]
  static final extraD =
      QueryRelationToOne<ControlForm, Extra>(_entities[1].properties[22]);

  /// see [ControlForm.equipmentD]
  static final equipmentD =
      QueryRelationToOne<ControlForm, Equipment>(_entities[1].properties[23]);
}

/// [CarBodywork] entity fields to define ObjectBox queries.
class CarBodywork_ {
  /// see [CarBodywork.id]
  static final id =
      QueryIntegerProperty<CarBodywork>(_entities[2].properties[0]);

  /// see [CarBodywork.wiperBladesFront]
  static final wiperBladesFront =
      QueryStringProperty<CarBodywork>(_entities[2].properties[1]);

  /// see [CarBodywork.wiperBladesFrontComments]
  static final wiperBladesFrontComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[2]);

  /// see [CarBodywork.wiperBladesBack]
  static final wiperBladesBack =
      QueryStringProperty<CarBodywork>(_entities[2].properties[3]);

  /// see [CarBodywork.wiperBladesBackComments]
  static final wiperBladesBackComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[4]);

  /// see [CarBodywork.windshieldWiperFront]
  static final windshieldWiperFront =
      QueryStringProperty<CarBodywork>(_entities[2].properties[5]);

  /// see [CarBodywork.windshieldWiperFrontComments]
  static final windshieldWiperFrontComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[6]);

  /// see [CarBodywork.windshieldWiperBack]
  static final windshieldWiperBack =
      QueryStringProperty<CarBodywork>(_entities[2].properties[7]);

  /// see [CarBodywork.windshieldWiperBackComments]
  static final windshieldWiperBackComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[8]);

  /// see [CarBodywork.generalBody]
  static final generalBody =
      QueryStringProperty<CarBodywork>(_entities[2].properties[9]);

  /// see [CarBodywork.generalBodyComments]
  static final generalBodyComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[10]);

  /// see [CarBodywork.decaling]
  static final decaling =
      QueryStringProperty<CarBodywork>(_entities[2].properties[11]);

  /// see [CarBodywork.decalingComments]
  static final decalingComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[12]);

  /// see [CarBodywork.tires]
  static final tires =
      QueryStringProperty<CarBodywork>(_entities[2].properties[13]);

  /// see [CarBodywork.tiresComments]
  static final tiresComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[14]);

  /// see [CarBodywork.glass]
  static final glass =
      QueryStringProperty<CarBodywork>(_entities[2].properties[15]);

  /// see [CarBodywork.glassComments]
  static final glassComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[16]);

  /// see [CarBodywork.mirrors]
  static final mirrors =
      QueryStringProperty<CarBodywork>(_entities[2].properties[17]);

  /// see [CarBodywork.mirrorsComments]
  static final mirrorsComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[18]);

  /// see [CarBodywork.parking]
  static final parking =
      QueryStringProperty<CarBodywork>(_entities[2].properties[19]);

  /// see [CarBodywork.parkingComments]
  static final parkingComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[20]);

  /// see [CarBodywork.brakes]
  static final brakes =
      QueryStringProperty<CarBodywork>(_entities[2].properties[21]);

  /// see [CarBodywork.brakesComments]
  static final brakesComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[22]);

  /// see [CarBodywork.emgBrakes]
  static final emgBrakes =
      QueryStringProperty<CarBodywork>(_entities[2].properties[23]);

  /// see [CarBodywork.emgBrakesComments]
  static final emgBrakesComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[24]);

  /// see [CarBodywork.horn]
  static final horn =
      QueryStringProperty<CarBodywork>(_entities[2].properties[25]);

  /// see [CarBodywork.hornComments]
  static final hornComments =
      QueryStringProperty<CarBodywork>(_entities[2].properties[26]);

  /// see [CarBodywork.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<CarBodywork>(_entities[2].properties[27]);

  /// see [CarBodywork.idDBR]
  static final idDBR =
      QueryStringProperty<CarBodywork>(_entities[2].properties[28]);

  /// see [CarBodywork.controlForm]
  static final controlForm =
      QueryRelationToOne<CarBodywork, ControlForm>(_entities[2].properties[29]);

  /// see [CarBodywork.wiperBladesFrontImages]
  static final wiperBladesFrontImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[30]);

  /// see [CarBodywork.wiperBladesFrontPath]
  static final wiperBladesFrontPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[31]);

  /// see [CarBodywork.wiperBladesBackImages]
  static final wiperBladesBackImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[32]);

  /// see [CarBodywork.wiperBladesBackPath]
  static final wiperBladesBackPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[33]);

  /// see [CarBodywork.windshieldWiperFrontImages]
  static final windshieldWiperFrontImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[34]);

  /// see [CarBodywork.windshieldWiperFrontPath]
  static final windshieldWiperFrontPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[35]);

  /// see [CarBodywork.windshieldWiperBackImages]
  static final windshieldWiperBackImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[36]);

  /// see [CarBodywork.windshieldWiperBackPath]
  static final windshieldWiperBackPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[37]);

  /// see [CarBodywork.generalBodyImages]
  static final generalBodyImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[38]);

  /// see [CarBodywork.generalBodyPath]
  static final generalBodyPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[39]);

  /// see [CarBodywork.decalingImages]
  static final decalingImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[40]);

  /// see [CarBodywork.decalingPath]
  static final decalingPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[41]);

  /// see [CarBodywork.tiresImages]
  static final tiresImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[42]);

  /// see [CarBodywork.tiresPath]
  static final tiresPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[43]);

  /// see [CarBodywork.glassImages]
  static final glassImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[44]);

  /// see [CarBodywork.glassPath]
  static final glassPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[45]);

  /// see [CarBodywork.mirrorsImages]
  static final mirrorsImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[46]);

  /// see [CarBodywork.mirrorsPath]
  static final mirrorsPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[47]);

  /// see [CarBodywork.parkingImages]
  static final parkingImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[48]);

  /// see [CarBodywork.parkingPath]
  static final parkingPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[49]);

  /// see [CarBodywork.brakesImages]
  static final brakesImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[50]);

  /// see [CarBodywork.brakesPath]
  static final brakesPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[51]);

  /// see [CarBodywork.emgBrakesImages]
  static final emgBrakesImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[52]);

  /// see [CarBodywork.emgBrakesPath]
  static final emgBrakesPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[53]);

  /// see [CarBodywork.hornImages]
  static final hornImages =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[54]);

  /// see [CarBodywork.hornPath]
  static final hornPath =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[55]);

  /// see [CarBodywork.wiperBladesFrontNames]
  static final wiperBladesFrontNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[56]);

  /// see [CarBodywork.wiperBladesBackNames]
  static final wiperBladesBackNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[57]);

  /// see [CarBodywork.windshieldWiperFrontNames]
  static final windshieldWiperFrontNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[58]);

  /// see [CarBodywork.windshieldWiperBackNames]
  static final windshieldWiperBackNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[59]);

  /// see [CarBodywork.generalBodyNames]
  static final generalBodyNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[60]);

  /// see [CarBodywork.decalingNames]
  static final decalingNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[61]);

  /// see [CarBodywork.tiresNames]
  static final tiresNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[62]);

  /// see [CarBodywork.glassNames]
  static final glassNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[63]);

  /// see [CarBodywork.mirrorsNames]
  static final mirrorsNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[64]);

  /// see [CarBodywork.parkingNames]
  static final parkingNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[65]);

  /// see [CarBodywork.brakesNames]
  static final brakesNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[66]);

  /// see [CarBodywork.emgBrakesNames]
  static final emgBrakesNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[67]);

  /// see [CarBodywork.hornNames]
  static final hornNames =
      QueryStringVectorProperty<CarBodywork>(_entities[2].properties[68]);
}

/// [Equipment] entity fields to define ObjectBox queries.
class Equipment_ {
  /// see [Equipment.id]
  static final id = QueryIntegerProperty<Equipment>(_entities[3].properties[0]);

  /// see [Equipment.ignitionKey]
  static final ignitionKey =
      QueryStringProperty<Equipment>(_entities[3].properties[1]);

  /// see [Equipment.ignitionKeyComments]
  static final ignitionKeyComments =
      QueryStringProperty<Equipment>(_entities[3].properties[2]);

  /// see [Equipment.binsBoxKey]
  static final binsBoxKey =
      QueryStringProperty<Equipment>(_entities[3].properties[3]);

  /// see [Equipment.binsBoxKeyComments]
  static final binsBoxKeyComments =
      QueryStringProperty<Equipment>(_entities[3].properties[4]);

  /// see [Equipment.vehicleRegistrationCopy]
  static final vehicleRegistrationCopy =
      QueryStringProperty<Equipment>(_entities[3].properties[5]);

  /// see [Equipment.vehicleRegistrationCopyComments]
  static final vehicleRegistrationCopyComments =
      QueryStringProperty<Equipment>(_entities[3].properties[6]);

  /// see [Equipment.vehicleInsuranceCopy]
  static final vehicleInsuranceCopy =
      QueryStringProperty<Equipment>(_entities[3].properties[7]);

  /// see [Equipment.vehicleInsuranceCopyComments]
  static final vehicleInsuranceCopyComments =
      QueryStringProperty<Equipment>(_entities[3].properties[8]);

  /// see [Equipment.bucketLiftOperatorManual]
  static final bucketLiftOperatorManual =
      QueryStringProperty<Equipment>(_entities[3].properties[9]);

  /// see [Equipment.bucketLiftOperatorManualComments]
  static final bucketLiftOperatorManualComments =
      QueryStringProperty<Equipment>(_entities[3].properties[10]);

  /// see [Equipment.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Equipment>(_entities[3].properties[11]);

  /// see [Equipment.idDBR]
  static final idDBR =
      QueryStringProperty<Equipment>(_entities[3].properties[12]);

  /// see [Equipment.controlForm]
  static final controlForm =
      QueryRelationToOne<Equipment, ControlForm>(_entities[3].properties[13]);

  /// see [Equipment.ignitionKeyImages]
  static final ignitionKeyImages =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[14]);

  /// see [Equipment.ignitionKeyPath]
  static final ignitionKeyPath =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[15]);

  /// see [Equipment.binsBoxKeyImages]
  static final binsBoxKeyImages =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[16]);

  /// see [Equipment.binsBoxKeyPath]
  static final binsBoxKeyPath =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[17]);

  /// see [Equipment.vehicleRegistrationCopyImages]
  static final vehicleRegistrationCopyImages =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[18]);

  /// see [Equipment.vehicleRegistrationCopyPath]
  static final vehicleRegistrationCopyPath =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[19]);

  /// see [Equipment.vehicleInsuranceCopyImages]
  static final vehicleInsuranceCopyImages =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[20]);

  /// see [Equipment.vehicleInsuranceCopyPath]
  static final vehicleInsuranceCopyPath =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[21]);

  /// see [Equipment.bucketLiftOperatorManualImages]
  static final bucketLiftOperatorManualImages =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[22]);

  /// see [Equipment.bucketLiftOperatorManualPath]
  static final bucketLiftOperatorManualPath =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[23]);

  /// see [Equipment.ignitionKeyNames]
  static final ignitionKeyNames =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[24]);

  /// see [Equipment.binsBoxKeyNames]
  static final binsBoxKeyNames =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[25]);

  /// see [Equipment.vehicleRegistrationCopyNames]
  static final vehicleRegistrationCopyNames =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[26]);

  /// see [Equipment.vehicleInsuranceCopyNames]
  static final vehicleInsuranceCopyNames =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[27]);

  /// see [Equipment.bucketLiftOperatorManualNames]
  static final bucketLiftOperatorManualNames =
      QueryStringVectorProperty<Equipment>(_entities[3].properties[28]);
}

/// [Extra] entity fields to define ObjectBox queries.
class Extra_ {
  /// see [Extra.id]
  static final id = QueryIntegerProperty<Extra>(_entities[4].properties[0]);

  /// see [Extra.ladder]
  static final ladder = QueryStringProperty<Extra>(_entities[4].properties[1]);

  /// see [Extra.ladderComments]
  static final ladderComments =
      QueryStringProperty<Extra>(_entities[4].properties[2]);

  /// see [Extra.stepLadder]
  static final stepLadder =
      QueryStringProperty<Extra>(_entities[4].properties[3]);

  /// see [Extra.stepLadderComments]
  static final stepLadderComments =
      QueryStringProperty<Extra>(_entities[4].properties[4]);

  /// see [Extra.hydraulicFluidForBucket]
  static final hydraulicFluidForBucket =
      QueryStringProperty<Extra>(_entities[4].properties[5]);

  /// see [Extra.hydraulicFluidForBucketComments]
  static final hydraulicFluidForBucketComments =
      QueryStringProperty<Extra>(_entities[4].properties[6]);

  /// see [Extra.fiberReelRack]
  static final fiberReelRack =
      QueryStringProperty<Extra>(_entities[4].properties[7]);

  /// see [Extra.fiberReelRackComments]
  static final fiberReelRackComments =
      QueryStringProperty<Extra>(_entities[4].properties[8]);

  /// see [Extra.binsLockedAndSecure]
  static final binsLockedAndSecure =
      QueryStringProperty<Extra>(_entities[4].properties[9]);

  /// see [Extra.binsLockedAndSecureComments]
  static final binsLockedAndSecureComments =
      QueryStringProperty<Extra>(_entities[4].properties[10]);

  /// see [Extra.safetyHarness]
  static final safetyHarness =
      QueryStringProperty<Extra>(_entities[4].properties[11]);

  /// see [Extra.safetyHarnessComments]
  static final safetyHarnessComments =
      QueryStringProperty<Extra>(_entities[4].properties[12]);

  /// see [Extra.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Extra>(_entities[4].properties[13]);

  /// see [Extra.idDBR]
  static final idDBR = QueryStringProperty<Extra>(_entities[4].properties[14]);

  /// see [Extra.controlForm]
  static final controlForm =
      QueryRelationToOne<Extra, ControlForm>(_entities[4].properties[15]);

  /// see [Extra.ladderStraps]
  static final ladderStraps =
      QueryStringProperty<Extra>(_entities[4].properties[16]);

  /// see [Extra.ladderStrapsComments]
  static final ladderStrapsComments =
      QueryStringProperty<Extra>(_entities[4].properties[17]);

  /// see [Extra.lanyardSafetyHarness]
  static final lanyardSafetyHarness =
      QueryStringProperty<Extra>(_entities[4].properties[18]);

  /// see [Extra.lanyardSafetyHarnessComments]
  static final lanyardSafetyHarnessComments =
      QueryStringProperty<Extra>(_entities[4].properties[19]);

  /// see [Extra.ladderImages]
  static final ladderImages =
      QueryStringVectorProperty<Extra>(_entities[4].properties[20]);

  /// see [Extra.ladderPath]
  static final ladderPath =
      QueryStringVectorProperty<Extra>(_entities[4].properties[21]);

  /// see [Extra.stepLadderImages]
  static final stepLadderImages =
      QueryStringVectorProperty<Extra>(_entities[4].properties[22]);

  /// see [Extra.stepLadderPath]
  static final stepLadderPath =
      QueryStringVectorProperty<Extra>(_entities[4].properties[23]);

  /// see [Extra.ladderStrapsImages]
  static final ladderStrapsImages =
      QueryStringVectorProperty<Extra>(_entities[4].properties[24]);

  /// see [Extra.ladderStrapsPath]
  static final ladderStrapsPath =
      QueryStringVectorProperty<Extra>(_entities[4].properties[25]);

  /// see [Extra.hydraulicFluidForBucketImages]
  static final hydraulicFluidForBucketImages =
      QueryStringVectorProperty<Extra>(_entities[4].properties[26]);

  /// see [Extra.hydraulicFluidForBucketPath]
  static final hydraulicFluidForBucketPath =
      QueryStringVectorProperty<Extra>(_entities[4].properties[27]);

  /// see [Extra.fiberReelRackImages]
  static final fiberReelRackImages =
      QueryStringVectorProperty<Extra>(_entities[4].properties[28]);

  /// see [Extra.fiberReelRackPath]
  static final fiberReelRackPath =
      QueryStringVectorProperty<Extra>(_entities[4].properties[29]);

  /// see [Extra.binsLockedAndSecureImages]
  static final binsLockedAndSecureImages =
      QueryStringVectorProperty<Extra>(_entities[4].properties[30]);

  /// see [Extra.binsLockedAndSecurePath]
  static final binsLockedAndSecurePath =
      QueryStringVectorProperty<Extra>(_entities[4].properties[31]);

  /// see [Extra.safetyHarnessImages]
  static final safetyHarnessImages =
      QueryStringVectorProperty<Extra>(_entities[4].properties[32]);

  /// see [Extra.safetyHarnessPath]
  static final safetyHarnessPath =
      QueryStringVectorProperty<Extra>(_entities[4].properties[33]);

  /// see [Extra.lanyardSafetyHarnessImages]
  static final lanyardSafetyHarnessImages =
      QueryStringVectorProperty<Extra>(_entities[4].properties[34]);

  /// see [Extra.lanyardSafetyHarnessPath]
  static final lanyardSafetyHarnessPath =
      QueryStringVectorProperty<Extra>(_entities[4].properties[35]);

  /// see [Extra.ladderNames]
  static final ladderNames =
      QueryStringVectorProperty<Extra>(_entities[4].properties[36]);

  /// see [Extra.stepLadderNames]
  static final stepLadderNames =
      QueryStringVectorProperty<Extra>(_entities[4].properties[37]);

  /// see [Extra.ladderStrapsNames]
  static final ladderStrapsNames =
      QueryStringVectorProperty<Extra>(_entities[4].properties[38]);

  /// see [Extra.hydraulicFluidForBucketNames]
  static final hydraulicFluidForBucketNames =
      QueryStringVectorProperty<Extra>(_entities[4].properties[39]);

  /// see [Extra.fiberReelRackNames]
  static final fiberReelRackNames =
      QueryStringVectorProperty<Extra>(_entities[4].properties[40]);

  /// see [Extra.binsLockedAndSecureNames]
  static final binsLockedAndSecureNames =
      QueryStringVectorProperty<Extra>(_entities[4].properties[41]);

  /// see [Extra.safetyHarnessNames]
  static final safetyHarnessNames =
      QueryStringVectorProperty<Extra>(_entities[4].properties[42]);

  /// see [Extra.lanyardSafetyHarnessNames]
  static final lanyardSafetyHarnessNames =
      QueryStringVectorProperty<Extra>(_entities[4].properties[43]);
}

/// [FluidsCheck] entity fields to define ObjectBox queries.
class FluidsCheck_ {
  /// see [FluidsCheck.id]
  static final id =
      QueryIntegerProperty<FluidsCheck>(_entities[5].properties[0]);

  /// see [FluidsCheck.engineOil]
  static final engineOil =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[1]);

  /// see [FluidsCheck.engineOilComments]
  static final engineOilComments =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[2]);

  /// see [FluidsCheck.transmission]
  static final transmission =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[3]);

  /// see [FluidsCheck.transmissionComments]
  static final transmissionComments =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[4]);

  /// see [FluidsCheck.coolant]
  static final coolant =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[5]);

  /// see [FluidsCheck.coolantComments]
  static final coolantComments =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[6]);

  /// see [FluidsCheck.powerSteering]
  static final powerSteering =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[7]);

  /// see [FluidsCheck.powerSteeringComments]
  static final powerSteeringComments =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[8]);

  /// see [FluidsCheck.windshieldWasherFluid]
  static final windshieldWasherFluid =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[9]);

  /// see [FluidsCheck.windshieldWasherFluidComments]
  static final windshieldWasherFluidComments =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[10]);

  /// see [FluidsCheck.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<FluidsCheck>(_entities[5].properties[11]);

  /// see [FluidsCheck.idDBR]
  static final idDBR =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[12]);

  /// see [FluidsCheck.controlForm]
  static final controlForm =
      QueryRelationToOne<FluidsCheck, ControlForm>(_entities[5].properties[13]);

  /// see [FluidsCheck.dieselExhaustFluid]
  static final dieselExhaustFluid =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[14]);

  /// see [FluidsCheck.dieselExhaustFluidComments]
  static final dieselExhaustFluidComments =
      QueryStringProperty<FluidsCheck>(_entities[5].properties[15]);

  /// see [FluidsCheck.engineOilImages]
  static final engineOilImages =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[16]);

  /// see [FluidsCheck.engineOilPath]
  static final engineOilPath =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[17]);

  /// see [FluidsCheck.transmissionImages]
  static final transmissionImages =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[18]);

  /// see [FluidsCheck.transmissionPath]
  static final transmissionPath =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[19]);

  /// see [FluidsCheck.coolantImages]
  static final coolantImages =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[20]);

  /// see [FluidsCheck.coolantPath]
  static final coolantPath =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[21]);

  /// see [FluidsCheck.powerSteeringImages]
  static final powerSteeringImages =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[22]);

  /// see [FluidsCheck.powerSteeringPath]
  static final powerSteeringPath =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[23]);

  /// see [FluidsCheck.dieselExhaustFluidImages]
  static final dieselExhaustFluidImages =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[24]);

  /// see [FluidsCheck.dieselExhaustFluidPath]
  static final dieselExhaustFluidPath =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[25]);

  /// see [FluidsCheck.windshieldWasherFluidImages]
  static final windshieldWasherFluidImages =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[26]);

  /// see [FluidsCheck.windshieldWasherFluidPath]
  static final windshieldWasherFluidPath =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[27]);

  /// see [FluidsCheck.engineOilNames]
  static final engineOilNames =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[28]);

  /// see [FluidsCheck.transmissionNames]
  static final transmissionNames =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[29]);

  /// see [FluidsCheck.coolantNames]
  static final coolantNames =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[30]);

  /// see [FluidsCheck.powerSteeringNames]
  static final powerSteeringNames =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[31]);

  /// see [FluidsCheck.dieselExhaustFluidNames]
  static final dieselExhaustFluidNames =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[32]);

  /// see [FluidsCheck.windshieldWasherFluidNames]
  static final windshieldWasherFluidNames =
      QueryStringVectorProperty<FluidsCheck>(_entities[5].properties[33]);
}

/// [Lights] entity fields to define ObjectBox queries.
class Lights_ {
  /// see [Lights.id]
  static final id = QueryIntegerProperty<Lights>(_entities[6].properties[0]);

  /// see [Lights.headLights]
  static final headLights =
      QueryStringProperty<Lights>(_entities[6].properties[1]);

  /// see [Lights.headLightsComments]
  static final headLightsComments =
      QueryStringProperty<Lights>(_entities[6].properties[2]);

  /// see [Lights.brakeLights]
  static final brakeLights =
      QueryStringProperty<Lights>(_entities[6].properties[3]);

  /// see [Lights.brakeLightsComments]
  static final brakeLightsComments =
      QueryStringProperty<Lights>(_entities[6].properties[4]);

  /// see [Lights.reverseLights]
  static final reverseLights =
      QueryStringProperty<Lights>(_entities[6].properties[5]);

  /// see [Lights.reverseLightsComments]
  static final reverseLightsComments =
      QueryStringProperty<Lights>(_entities[6].properties[6]);

  /// see [Lights.warningLights]
  static final warningLights =
      QueryStringProperty<Lights>(_entities[6].properties[7]);

  /// see [Lights.warningLightsComments]
  static final warningLightsComments =
      QueryStringProperty<Lights>(_entities[6].properties[8]);

  /// see [Lights.turnSignals]
  static final turnSignals =
      QueryStringProperty<Lights>(_entities[6].properties[9]);

  /// see [Lights.turnSignalsComments]
  static final turnSignalsComments =
      QueryStringProperty<Lights>(_entities[6].properties[10]);

  /// see [Lights.dashLights]
  static final dashLights =
      QueryStringProperty<Lights>(_entities[6].properties[11]);

  /// see [Lights.dashLightsComments]
  static final dashLightsComments =
      QueryStringProperty<Lights>(_entities[6].properties[12]);

  /// see [Lights.strobeLights]
  static final strobeLights =
      QueryStringProperty<Lights>(_entities[6].properties[13]);

  /// see [Lights.strobeLightsComments]
  static final strobeLightsComments =
      QueryStringProperty<Lights>(_entities[6].properties[14]);

  /// see [Lights.cabRoofLights]
  static final cabRoofLights =
      QueryStringProperty<Lights>(_entities[6].properties[15]);

  /// see [Lights.cabRoofLightsComments]
  static final cabRoofLightsComments =
      QueryStringProperty<Lights>(_entities[6].properties[16]);

  /// see [Lights.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Lights>(_entities[6].properties[17]);

  /// see [Lights.idDBR]
  static final idDBR = QueryStringProperty<Lights>(_entities[6].properties[18]);

  /// see [Lights.controlForm]
  static final controlForm =
      QueryRelationToOne<Lights, ControlForm>(_entities[6].properties[19]);

  /// see [Lights.fourWayFlashers]
  static final fourWayFlashers =
      QueryStringProperty<Lights>(_entities[6].properties[20]);

  /// see [Lights.fourWayFlashersComments]
  static final fourWayFlashersComments =
      QueryStringProperty<Lights>(_entities[6].properties[21]);

  /// see [Lights.headLightsImages]
  static final headLightsImages =
      QueryStringVectorProperty<Lights>(_entities[6].properties[22]);

  /// see [Lights.headLightsPath]
  static final headLightsPath =
      QueryStringVectorProperty<Lights>(_entities[6].properties[23]);

  /// see [Lights.brakeLightsImages]
  static final brakeLightsImages =
      QueryStringVectorProperty<Lights>(_entities[6].properties[24]);

  /// see [Lights.brakeLightsPath]
  static final brakeLightsPath =
      QueryStringVectorProperty<Lights>(_entities[6].properties[25]);

  /// see [Lights.reverseLightsImages]
  static final reverseLightsImages =
      QueryStringVectorProperty<Lights>(_entities[6].properties[26]);

  /// see [Lights.reverseLightsPath]
  static final reverseLightsPath =
      QueryStringVectorProperty<Lights>(_entities[6].properties[27]);

  /// see [Lights.warningLightsImages]
  static final warningLightsImages =
      QueryStringVectorProperty<Lights>(_entities[6].properties[28]);

  /// see [Lights.warningLightsPath]
  static final warningLightsPath =
      QueryStringVectorProperty<Lights>(_entities[6].properties[29]);

  /// see [Lights.turnSignalsImages]
  static final turnSignalsImages =
      QueryStringVectorProperty<Lights>(_entities[6].properties[30]);

  /// see [Lights.turnSignalsPath]
  static final turnSignalsPath =
      QueryStringVectorProperty<Lights>(_entities[6].properties[31]);

  /// see [Lights.fourWayFlashersImages]
  static final fourWayFlashersImages =
      QueryStringVectorProperty<Lights>(_entities[6].properties[32]);

  /// see [Lights.fourWayFlashersPath]
  static final fourWayFlashersPath =
      QueryStringVectorProperty<Lights>(_entities[6].properties[33]);

  /// see [Lights.dashLightsImages]
  static final dashLightsImages =
      QueryStringVectorProperty<Lights>(_entities[6].properties[34]);

  /// see [Lights.dashLightsPath]
  static final dashLightsPath =
      QueryStringVectorProperty<Lights>(_entities[6].properties[35]);

  /// see [Lights.strobeLightsImages]
  static final strobeLightsImages =
      QueryStringVectorProperty<Lights>(_entities[6].properties[36]);

  /// see [Lights.strobeLightsPath]
  static final strobeLightsPath =
      QueryStringVectorProperty<Lights>(_entities[6].properties[37]);

  /// see [Lights.cabRoofLightsImages]
  static final cabRoofLightsImages =
      QueryStringVectorProperty<Lights>(_entities[6].properties[38]);

  /// see [Lights.cabRoofLightsPath]
  static final cabRoofLightsPath =
      QueryStringVectorProperty<Lights>(_entities[6].properties[39]);

  /// see [Lights.clearanceLightsImages]
  static final clearanceLightsImages =
      QueryStringVectorProperty<Lights>(_entities[6].properties[40]);

  /// see [Lights.clearanceLightsPath]
  static final clearanceLightsPath =
      QueryStringVectorProperty<Lights>(_entities[6].properties[41]);

  /// see [Lights.clearanceLights]
  static final clearanceLights =
      QueryStringProperty<Lights>(_entities[6].properties[42]);

  /// see [Lights.clearanceLightsComments]
  static final clearanceLightsComments =
      QueryStringProperty<Lights>(_entities[6].properties[43]);

  /// see [Lights.headLightsNames]
  static final headLightsNames =
      QueryStringVectorProperty<Lights>(_entities[6].properties[44]);

  /// see [Lights.brakeLightsNames]
  static final brakeLightsNames =
      QueryStringVectorProperty<Lights>(_entities[6].properties[45]);

  /// see [Lights.reverseLightsNames]
  static final reverseLightsNames =
      QueryStringVectorProperty<Lights>(_entities[6].properties[46]);

  /// see [Lights.warningLightsNames]
  static final warningLightsNames =
      QueryStringVectorProperty<Lights>(_entities[6].properties[47]);

  /// see [Lights.turnSignalsNames]
  static final turnSignalsNames =
      QueryStringVectorProperty<Lights>(_entities[6].properties[48]);

  /// see [Lights.fourWayFlashersNames]
  static final fourWayFlashersNames =
      QueryStringVectorProperty<Lights>(_entities[6].properties[49]);

  /// see [Lights.dashLightsNames]
  static final dashLightsNames =
      QueryStringVectorProperty<Lights>(_entities[6].properties[50]);

  /// see [Lights.strobeLightsNames]
  static final strobeLightsNames =
      QueryStringVectorProperty<Lights>(_entities[6].properties[51]);

  /// see [Lights.cabRoofLightsNames]
  static final cabRoofLightsNames =
      QueryStringVectorProperty<Lights>(_entities[6].properties[52]);

  /// see [Lights.clearanceLightsNames]
  static final clearanceLightsNames =
      QueryStringVectorProperty<Lights>(_entities[6].properties[53]);
}

/// [Measures] entity fields to define ObjectBox queries.
class Measures_ {
  /// see [Measures.id]
  static final id = QueryIntegerProperty<Measures>(_entities[7].properties[0]);

  /// see [Measures.gas]
  static final gas = QueryStringProperty<Measures>(_entities[7].properties[1]);

  /// see [Measures.gasComments]
  static final gasComments =
      QueryStringProperty<Measures>(_entities[7].properties[2]);

  /// see [Measures.mileage]
  static final mileage =
      QueryIntegerProperty<Measures>(_entities[7].properties[3]);

  /// see [Measures.mileageComments]
  static final mileageComments =
      QueryStringProperty<Measures>(_entities[7].properties[4]);

  /// see [Measures.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Measures>(_entities[7].properties[5]);

  /// see [Measures.idDBR]
  static final idDBR =
      QueryStringProperty<Measures>(_entities[7].properties[6]);

  /// see [Measures.controlForm]
  static final controlForm =
      QueryRelationToOne<Measures, ControlForm>(_entities[7].properties[7]);

  /// see [Measures.gasPath]
  static final gasPath =
      QueryStringVectorProperty<Measures>(_entities[7].properties[8]);

  /// see [Measures.mileagePath]
  static final mileagePath =
      QueryStringVectorProperty<Measures>(_entities[7].properties[9]);

  /// see [Measures.gasImages]
  static final gasImages =
      QueryStringVectorProperty<Measures>(_entities[7].properties[10]);

  /// see [Measures.mileageImages]
  static final mileageImages =
      QueryStringVectorProperty<Measures>(_entities[7].properties[11]);

  /// see [Measures.gasNames]
  static final gasNames =
      QueryStringVectorProperty<Measures>(_entities[7].properties[12]);

  /// see [Measures.mileageNames]
  static final mileageNames =
      QueryStringVectorProperty<Measures>(_entities[7].properties[13]);
}

/// [Security] entity fields to define ObjectBox queries.
class Security_ {
  /// see [Security.id]
  static final id = QueryIntegerProperty<Security>(_entities[8].properties[0]);

  /// see [Security.rtaMagnet]
  static final rtaMagnet =
      QueryStringProperty<Security>(_entities[8].properties[1]);

  /// see [Security.rtaMagnetComments]
  static final rtaMagnetComments =
      QueryStringProperty<Security>(_entities[8].properties[2]);

  /// see [Security.triangleReflectors]
  static final triangleReflectors =
      QueryStringProperty<Security>(_entities[8].properties[3]);

  /// see [Security.triangleReflectorsComments]
  static final triangleReflectorsComments =
      QueryStringProperty<Security>(_entities[8].properties[4]);

  /// see [Security.wheelChocks]
  static final wheelChocks =
      QueryStringProperty<Security>(_entities[8].properties[5]);

  /// see [Security.wheelChocksComments]
  static final wheelChocksComments =
      QueryStringProperty<Security>(_entities[8].properties[6]);

  /// see [Security.fireExtinguisher]
  static final fireExtinguisher =
      QueryStringProperty<Security>(_entities[8].properties[7]);

  /// see [Security.fireExtinguisherComments]
  static final fireExtinguisherComments =
      QueryStringProperty<Security>(_entities[8].properties[8]);

  /// see [Security.backUpAlarm]
  static final backUpAlarm =
      QueryStringProperty<Security>(_entities[8].properties[9]);

  /// see [Security.backUpAlarmComments]
  static final backUpAlarmComments =
      QueryStringProperty<Security>(_entities[8].properties[10]);

  /// see [Security.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Security>(_entities[8].properties[11]);

  /// see [Security.idDBR]
  static final idDBR =
      QueryStringProperty<Security>(_entities[8].properties[12]);

  /// see [Security.controlForm]
  static final controlForm =
      QueryRelationToOne<Security, ControlForm>(_entities[8].properties[13]);

  /// see [Security.firstAidKitSafetyVest]
  static final firstAidKitSafetyVest =
      QueryStringProperty<Security>(_entities[8].properties[14]);

  /// see [Security.firstAidKitSafetyVestComments]
  static final firstAidKitSafetyVestComments =
      QueryStringProperty<Security>(_entities[8].properties[15]);

  /// see [Security.rtaMagnetImages]
  static final rtaMagnetImages =
      QueryStringVectorProperty<Security>(_entities[8].properties[16]);

  /// see [Security.rtaMagnetPath]
  static final rtaMagnetPath =
      QueryStringVectorProperty<Security>(_entities[8].properties[17]);

  /// see [Security.triangleReflectorsImages]
  static final triangleReflectorsImages =
      QueryStringVectorProperty<Security>(_entities[8].properties[18]);

  /// see [Security.triangleReflectorsPath]
  static final triangleReflectorsPath =
      QueryStringVectorProperty<Security>(_entities[8].properties[19]);

  /// see [Security.wheelChocksImages]
  static final wheelChocksImages =
      QueryStringVectorProperty<Security>(_entities[8].properties[20]);

  /// see [Security.wheelChocksPath]
  static final wheelChocksPath =
      QueryStringVectorProperty<Security>(_entities[8].properties[21]);

  /// see [Security.fireExtinguisherImages]
  static final fireExtinguisherImages =
      QueryStringVectorProperty<Security>(_entities[8].properties[22]);

  /// see [Security.fireExtinguisherPath]
  static final fireExtinguisherPath =
      QueryStringVectorProperty<Security>(_entities[8].properties[23]);

  /// see [Security.firstAidKitSafetyVestImages]
  static final firstAidKitSafetyVestImages =
      QueryStringVectorProperty<Security>(_entities[8].properties[24]);

  /// see [Security.firstAidKitSafetyVestPath]
  static final firstAidKitSafetyVestPath =
      QueryStringVectorProperty<Security>(_entities[8].properties[25]);

  /// see [Security.backUpAlarmImages]
  static final backUpAlarmImages =
      QueryStringVectorProperty<Security>(_entities[8].properties[26]);

  /// see [Security.backUpAlarmPath]
  static final backUpAlarmPath =
      QueryStringVectorProperty<Security>(_entities[8].properties[27]);

  /// see [Security.rtaMagnetNames]
  static final rtaMagnetNames =
      QueryStringVectorProperty<Security>(_entities[8].properties[28]);

  /// see [Security.triangleReflectorsNames]
  static final triangleReflectorsNames =
      QueryStringVectorProperty<Security>(_entities[8].properties[29]);

  /// see [Security.wheelChocksNames]
  static final wheelChocksNames =
      QueryStringVectorProperty<Security>(_entities[8].properties[30]);

  /// see [Security.fireExtinguisherNames]
  static final fireExtinguisherNames =
      QueryStringVectorProperty<Security>(_entities[8].properties[31]);

  /// see [Security.firstAidKitSafetyVestNames]
  static final firstAidKitSafetyVestNames =
      QueryStringVectorProperty<Security>(_entities[8].properties[32]);

  /// see [Security.backUpAlarmNames]
  static final backUpAlarmNames =
      QueryStringVectorProperty<Security>(_entities[8].properties[33]);
}

/// [BucketInspection] entity fields to define ObjectBox queries.
class BucketInspection_ {
  /// see [BucketInspection.id]
  static final id =
      QueryIntegerProperty<BucketInspection>(_entities[9].properties[0]);

  /// see [BucketInspection.insulated]
  static final insulated =
      QueryStringProperty<BucketInspection>(_entities[9].properties[1]);

  /// see [BucketInspection.insulatedComments]
  static final insulatedComments =
      QueryStringProperty<BucketInspection>(_entities[9].properties[2]);

  /// see [BucketInspection.holesDrilled]
  static final holesDrilled =
      QueryStringProperty<BucketInspection>(_entities[9].properties[3]);

  /// see [BucketInspection.holesDrilledComments]
  static final holesDrilledComments =
      QueryStringProperty<BucketInspection>(_entities[9].properties[4]);

  /// see [BucketInspection.bucketLiner]
  static final bucketLiner =
      QueryStringProperty<BucketInspection>(_entities[9].properties[5]);

  /// see [BucketInspection.bucketLinerComments]
  static final bucketLinerComments =
      QueryStringProperty<BucketInspection>(_entities[9].properties[6]);

  /// see [BucketInspection.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<BucketInspection>(_entities[9].properties[7]);

  /// see [BucketInspection.idDBR]
  static final idDBR =
      QueryStringProperty<BucketInspection>(_entities[9].properties[8]);

  /// see [BucketInspection.controlForm]
  static final controlForm = QueryRelationToOne<BucketInspection, ControlForm>(
      _entities[9].properties[9]);

  /// see [BucketInspection.insulatedImages]
  static final insulatedImages =
      QueryStringVectorProperty<BucketInspection>(_entities[9].properties[10]);

  /// see [BucketInspection.insulatedPath]
  static final insulatedPath =
      QueryStringVectorProperty<BucketInspection>(_entities[9].properties[11]);

  /// see [BucketInspection.holesDrilledImages]
  static final holesDrilledImages =
      QueryStringVectorProperty<BucketInspection>(_entities[9].properties[12]);

  /// see [BucketInspection.holesDrilledPath]
  static final holesDrilledPath =
      QueryStringVectorProperty<BucketInspection>(_entities[9].properties[13]);

  /// see [BucketInspection.bucketLinerImages]
  static final bucketLinerImages =
      QueryStringVectorProperty<BucketInspection>(_entities[9].properties[14]);

  /// see [BucketInspection.bucketLinerPath]
  static final bucketLinerPath =
      QueryStringVectorProperty<BucketInspection>(_entities[9].properties[15]);

  /// see [BucketInspection.insulatedNames]
  static final insulatedNames =
      QueryStringVectorProperty<BucketInspection>(_entities[9].properties[16]);

  /// see [BucketInspection.holesDrilledNames]
  static final holesDrilledNames =
      QueryStringVectorProperty<BucketInspection>(_entities[9].properties[17]);

  /// see [BucketInspection.bucketLinerNames]
  static final bucketLinerNames =
      QueryStringVectorProperty<BucketInspection>(_entities[9].properties[18]);
}

/// [Company] entity fields to define ObjectBox queries.
class Company_ {
  /// see [Company.id]
  static final id = QueryIntegerProperty<Company>(_entities[10].properties[0]);

  /// see [Company.company]
  static final company =
      QueryStringProperty<Company>(_entities[10].properties[1]);

  /// see [Company.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Company>(_entities[10].properties[2]);

  /// see [Company.idDBR]
  static final idDBR =
      QueryStringProperty<Company>(_entities[10].properties[3]);
}

/// [Role] entity fields to define ObjectBox queries.
class Role_ {
  /// see [Role.id]
  static final id = QueryIntegerProperty<Role>(_entities[11].properties[0]);

  /// see [Role.role]
  static final role = QueryStringProperty<Role>(_entities[11].properties[1]);

  /// see [Role.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Role>(_entities[11].properties[2]);

  /// see [Role.idDBR]
  static final idDBR = QueryStringProperty<Role>(_entities[11].properties[3]);

  /// see [Role.bitacora]
  static final bitacora =
      QueryRelationToOne<Role, Bitacora>(_entities[11].properties[4]);

  /// see [Role.users]
  static final users =
      QueryRelationToMany<Role, Users>(_entities[11].relations[0]);
}

/// [Status] entity fields to define ObjectBox queries.
class Status_ {
  /// see [Status.id]
  static final id = QueryIntegerProperty<Status>(_entities[12].properties[0]);

  /// see [Status.status]
  static final status =
      QueryStringProperty<Status>(_entities[12].properties[1]);

  /// see [Status.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Status>(_entities[12].properties[2]);

  /// see [Status.idDBR]
  static final idDBR = QueryStringProperty<Status>(_entities[12].properties[3]);
}

/// [Vehicle] entity fields to define ObjectBox queries.
class Vehicle_ {
  /// see [Vehicle.id]
  static final id = QueryIntegerProperty<Vehicle>(_entities[13].properties[0]);

  /// see [Vehicle.make]
  static final make = QueryStringProperty<Vehicle>(_entities[13].properties[1]);

  /// see [Vehicle.model]
  static final model =
      QueryStringProperty<Vehicle>(_entities[13].properties[2]);

  /// see [Vehicle.year]
  static final year = QueryStringProperty<Vehicle>(_entities[13].properties[3]);

  /// see [Vehicle.image]
  static final image =
      QueryStringProperty<Vehicle>(_entities[13].properties[4]);

  /// see [Vehicle.path]
  static final path = QueryStringProperty<Vehicle>(_entities[13].properties[5]);

  /// see [Vehicle.vin]
  static final vin = QueryStringProperty<Vehicle>(_entities[13].properties[6]);

  /// see [Vehicle.motor]
  static final motor =
      QueryStringProperty<Vehicle>(_entities[13].properties[7]);

  /// see [Vehicle.color]
  static final color =
      QueryStringProperty<Vehicle>(_entities[13].properties[8]);

  /// see [Vehicle.oilChangeDue]
  static final oilChangeDue =
      QueryIntegerProperty<Vehicle>(_entities[13].properties[9]);

  /// see [Vehicle.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Vehicle>(_entities[13].properties[10]);

  /// see [Vehicle.idDBR]
  static final idDBR =
      QueryStringProperty<Vehicle>(_entities[13].properties[11]);

  /// see [Vehicle.status]
  static final status =
      QueryRelationToOne<Vehicle, Status>(_entities[13].properties[12]);

  /// see [Vehicle.company]
  static final company =
      QueryRelationToOne<Vehicle, Company>(_entities[13].properties[13]);

  /// see [Vehicle.licensePlates]
  static final licensePlates =
      QueryStringProperty<Vehicle>(_entities[13].properties[14]);

  /// see [Vehicle.lastTransmissionFluidChange]
  static final lastTransmissionFluidChange =
      QueryIntegerProperty<Vehicle>(_entities[13].properties[15]);

  /// see [Vehicle.lastRadiatorFluidChange]
  static final lastRadiatorFluidChange =
      QueryIntegerProperty<Vehicle>(_entities[13].properties[16]);

  /// see [Vehicle.ruleOilChange]
  static final ruleOilChange =
      QueryRelationToOne<Vehicle, Rule>(_entities[13].properties[17]);

  /// see [Vehicle.ruleTransmissionFluidChange]
  static final ruleTransmissionFluidChange =
      QueryRelationToOne<Vehicle, Rule>(_entities[13].properties[18]);

  /// see [Vehicle.ruleRadiatorFluidChange]
  static final ruleRadiatorFluidChange =
      QueryRelationToOne<Vehicle, Rule>(_entities[13].properties[19]);

  /// see [Vehicle.mileage]
  static final mileage =
      QueryIntegerProperty<Vehicle>(_entities[13].properties[20]);

  /// see [Vehicle.carWash]
  static final carWash =
      QueryBooleanProperty<Vehicle>(_entities[13].properties[21]);

  /// see [Vehicle.weeklyCheckUp]
  static final weeklyCheckUp =
      QueryBooleanProperty<Vehicle>(_entities[13].properties[22]);

  /// see [Vehicle.filterCheckTSM]
  static final filterCheckTSM =
      QueryBooleanProperty<Vehicle>(_entities[13].properties[23]);

  /// see [Vehicle.lastTireChange]
  static final lastTireChange =
      QueryIntegerProperty<Vehicle>(_entities[13].properties[24]);

  /// see [Vehicle.lastBrakeChange]
  static final lastBrakeChange =
      QueryIntegerProperty<Vehicle>(_entities[13].properties[25]);

  /// see [Vehicle.ruleTireChange]
  static final ruleTireChange =
      QueryRelationToOne<Vehicle, Rule>(_entities[13].properties[26]);

  /// see [Vehicle.ruleBrakeChange]
  static final ruleBrakeChange =
      QueryRelationToOne<Vehicle, Rule>(_entities[13].properties[27]);
}

/// [Users] entity fields to define ObjectBox queries.
class Users_ {
  /// see [Users.id]
  static final id = QueryIntegerProperty<Users>(_entities[14].properties[0]);

  /// see [Users.lastName]
  static final lastName =
      QueryStringProperty<Users>(_entities[14].properties[1]);

  /// see [Users.password]
  static final password =
      QueryStringProperty<Users>(_entities[14].properties[2]);

  /// see [Users.idDBR]
  static final idDBR = QueryStringProperty<Users>(_entities[14].properties[3]);

  /// see [Users.role]
  static final role =
      QueryRelationToOne<Users, Role>(_entities[14].properties[4]);

  /// see [Users.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Users>(_entities[14].properties[5]);

  /// see [Users.firstName]
  static final firstName =
      QueryStringProperty<Users>(_entities[14].properties[6]);

  /// see [Users.email]
  static final email = QueryStringProperty<Users>(_entities[14].properties[7]);

  /// see [Users.image]
  static final image =
      QueryRelationToOne<Users, Image>(_entities[14].properties[8]);

  /// see [Users.bitacora]
  static final bitacora =
      QueryRelationToMany<Users, Bitacora>(_entities[14].relations[0]);

  /// see [Users.roles]
  static final roles =
      QueryRelationToMany<Users, Role>(_entities[14].relations[1]);
}

/// [Service] entity fields to define ObjectBox queries.
class Service_ {
  /// see [Service.id]
  static final id = QueryIntegerProperty<Service>(_entities[15].properties[0]);

  /// see [Service.service]
  static final service =
      QueryStringProperty<Service>(_entities[15].properties[1]);

  /// see [Service.description]
  static final description =
      QueryStringProperty<Service>(_entities[15].properties[2]);

  /// see [Service.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Service>(_entities[15].properties[3]);

  /// see [Service.idDBR]
  static final idDBR =
      QueryStringProperty<Service>(_entities[15].properties[4]);
}

/// [VehicleServices] entity fields to define ObjectBox queries.
class VehicleServices_ {
  /// see [VehicleServices.id]
  static final id =
      QueryIntegerProperty<VehicleServices>(_entities[16].properties[0]);

  /// see [VehicleServices.completed]
  static final completed =
      QueryBooleanProperty<VehicleServices>(_entities[16].properties[1]);

  /// see [VehicleServices.serviceDate]
  static final serviceDate =
      QueryIntegerProperty<VehicleServices>(_entities[16].properties[2]);

  /// see [VehicleServices.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<VehicleServices>(_entities[16].properties[3]);

  /// see [VehicleServices.idDBR]
  static final idDBR =
      QueryStringProperty<VehicleServices>(_entities[16].properties[4]);

  /// see [VehicleServices.vehicle]
  static final vehicle =
      QueryRelationToOne<VehicleServices, Vehicle>(_entities[16].properties[5]);

  /// see [VehicleServices.service]
  static final service =
      QueryRelationToOne<VehicleServices, Service>(_entities[16].properties[6]);

  /// see [VehicleServices.mileageRemaining]
  static final mileageRemaining =
      QueryIntegerProperty<VehicleServices>(_entities[16].properties[7]);
}

/// [Rule] entity fields to define ObjectBox queries.
class Rule_ {
  /// see [Rule.id]
  static final id = QueryIntegerProperty<Rule>(_entities[17].properties[0]);

  /// see [Rule.value]
  static final value = QueryStringProperty<Rule>(_entities[17].properties[1]);

  /// see [Rule.registered]
  static final registered =
      QueryStringProperty<Rule>(_entities[17].properties[2]);

  /// see [Rule.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Rule>(_entities[17].properties[3]);

  /// see [Rule.vehicle]
  static final vehicle =
      QueryRelationToOne<Rule, Vehicle>(_entities[17].properties[4]);

  /// see [Rule.lastMileageService]
  static final lastMileageService =
      QueryIntegerProperty<Rule>(_entities[17].properties[5]);
}

/// [Image] entity fields to define ObjectBox queries.
class Image_ {
  /// see [Image.id]
  static final id = QueryIntegerProperty<Image>(_entities[18].properties[0]);

  /// see [Image.url]
  static final url = QueryStringProperty<Image>(_entities[18].properties[1]);

  /// see [Image.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Image>(_entities[18].properties[2]);

  /// see [Image.user]
  static final user =
      QueryRelationToOne<Image, Users>(_entities[18].properties[3]);

  /// see [Image.path]
  static final path = QueryStringProperty<Image>(_entities[18].properties[4]);

  /// see [Image.base64]
  static final base64 = QueryStringProperty<Image>(_entities[18].properties[5]);
}
